{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar MongoError = require('../core').MongoError;\n\nvar MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nvar ExecuteDbAdminCommandOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(ExecuteDbAdminCommandOperation, _OperationBase);\n\n  function ExecuteDbAdminCommandOperation(db, selector, options) {\n    var _this;\n\n    _classCallCheck(this, ExecuteDbAdminCommandOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExecuteDbAdminCommandOperation).call(this, options));\n    _this.db = db;\n    _this.selector = selector;\n    return _this;\n  }\n\n  _createClass(ExecuteDbAdminCommandOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var db = this.db;\n      var selector = this.selector;\n      var options = this.options;\n      var namespace = new MongoDBNamespace('admin', '$cmd');\n      db.s.topology.command(namespace, selector, options, function (err, result) {\n        // Did the user destroy the topology\n        if (db.serverConfig && db.serverConfig.isDestroyed()) {\n          return callback(new MongoError('topology was destroyed'));\n        }\n\n        if (err) return handleCallback(callback, err);\n        handleCallback(callback, null, result.result);\n      });\n    }\n  }]);\n\n  return ExecuteDbAdminCommandOperation;\n}(OperationBase);\n\nmodule.exports = ExecuteDbAdminCommandOperation;","map":null,"metadata":{},"sourceType":"script"}
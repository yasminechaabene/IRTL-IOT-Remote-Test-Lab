{"ast":null,"code":"'use strict';\n\nvar _get = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar EventEmitter = require('events');\n\nvar isResumableError = require('./error').isResumableError;\n\nvar MongoError = require('./core').MongoError;\n\nvar Cursor = require('./cursor');\n\nvar relayEvents = require('./core/utils').relayEvents;\n\nvar maxWireVersion = require('./core/utils').maxWireVersion;\n\nvar AggregateOperation = require('./operations/aggregate');\n\nvar CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nvar CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(CHANGE_STREAM_OPTIONS);\nvar CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n/**\n * @typedef ResumeToken\n * @description Represents the logical starting point for a new or resuming {@link ChangeStream} on the server.\n * @see https://docs.mongodb.com/master/changeStreams/#change-stream-resume-token\n */\n\n/**\n * @typedef OperationTime\n * @description Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\n */\n\n/**\n * @typedef ChangeStreamOptions\n * @description Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @property {string} [fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @property {number} [maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query.\n * @property {ResumeToken} [resumeAfter] Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/master/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}.\n * @property {ResumeToken} [startAfter] Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/master/changeStreams/#startafter-for-change-streams|ChangeStream documentation}.\n * @property {OperationTime} [startAtOperationTime] Will start the changeStream after the specified operationTime.\n * @property {number} [batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @property {object} [collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @property {ReadPreference} [readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n */\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @class ChangeStream\n * @since 3.0.0\n * @param {(MongoClient|Db|Collection)} parent The parent object that created this change stream\n * @param {Array} pipeline An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n * @param {ChangeStreamOptions} [options] Optional settings\n * @fires ChangeStream#close\n * @fires ChangeStream#change\n * @fires ChangeStream#end\n * @fires ChangeStream#error\n * @fires ChangeStream#resumeTokenChanged\n * @return {ChangeStream} a ChangeStream instance.\n */\n\nvar ChangeStream = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(ChangeStream, _EventEmitter);\n\n  function ChangeStream(parent, pipeline, options) {\n    var _this;\n\n    _classCallCheck(this, ChangeStream);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChangeStream).call(this));\n\n    var Collection = require('./collection');\n\n    var Db = require('./db');\n\n    var MongoClient = require('./mongo_client');\n\n    _this.pipeline = pipeline || [];\n    _this.options = options || {};\n    _this.parent = parent;\n    _this.namespace = parent.s.namespace;\n\n    if (parent instanceof Collection) {\n      _this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n      _this.topology = parent.s.db.serverConfig;\n    } else if (parent instanceof Db) {\n      _this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n      _this.topology = parent.serverConfig;\n    } else if (parent instanceof MongoClient) {\n      _this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n      _this.topology = parent.topology;\n    } else {\n      throw new TypeError('parent provided to ChangeStream constructor is not an instance of Collection, Db, or MongoClient');\n    }\n\n    _this.promiseLibrary = parent.s.promiseLibrary;\n\n    if (!_this.options.readPreference && parent.s.readPreference) {\n      _this.options.readPreference = parent.s.readPreference;\n    } // Create contained Change Stream cursor\n\n\n    _this.cursor = createChangeStreamCursor(_assertThisInitialized(_assertThisInitialized(_this)), options); // Listen for any `change` listeners being added to ChangeStream\n\n    _this.on('newListener', function (eventName) {\n      if (eventName === 'change' && _this.cursor && _this.listenerCount('change') === 0) {\n        _this.cursor.on('data', function (change) {\n          return processNewChange({\n            changeStream: _assertThisInitialized(_assertThisInitialized(_this)),\n            change: change,\n            eventEmitter: true\n          });\n        });\n      }\n    }); // Listen for all `change` listeners being removed from ChangeStream\n\n\n    _this.on('removeListener', function (eventName) {\n      if (eventName === 'change' && _this.listenerCount('change') === 0 && _this.cursor) {\n        _this.cursor.removeAllListeners('data');\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * @property {ResumeToken} resumeToken\n   * The cached resume token that will be used to resume\n   * after the most recently returned change.\n   */\n\n\n  _createClass(ChangeStream, [{\n    key: \"hasNext\",\n\n    /**\n     * Check if there is any document still available in the Change Stream\n     * @function ChangeStream.prototype.hasNext\n     * @param {ChangeStream~resultCallback} [callback] The result callback.\n     * @throws {MongoError}\n     * @return {Promise} returns Promise if no callback passed\n     */\n    value: function hasNext(callback) {\n      return this.cursor.hasNext(callback);\n    }\n    /**\n     * Get the next available document from the Change Stream, returns null if no more documents are available.\n     * @function ChangeStream.prototype.next\n     * @param {ChangeStream~resultCallback} [callback] The result callback.\n     * @throws {MongoError}\n     * @return {Promise} returns Promise if no callback passed\n     */\n\n  }, {\n    key: \"next\",\n    value: function next(callback) {\n      var self = this;\n\n      if (this.isClosed()) {\n        if (callback) return callback(new Error('Change Stream is not open.'), null);\n        return self.promiseLibrary.reject(new Error('Change Stream is not open.'));\n      }\n\n      return this.cursor.next().then(function (change) {\n        return processNewChange({\n          changeStream: self,\n          change: change,\n          callback: callback\n        });\n      }).catch(function (error) {\n        return processNewChange({\n          changeStream: self,\n          error: error,\n          callback: callback\n        });\n      });\n    }\n    /**\n     * Is the cursor closed\n     * @method ChangeStream.prototype.isClosed\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      if (this.cursor) {\n        return this.cursor.isClosed();\n      }\n\n      return true;\n    }\n    /**\n     * Close the Change Stream\n     * @method ChangeStream.prototype.close\n     * @param {ChangeStream~resultCallback} [callback] The result callback.\n     * @return {Promise} returns Promise if no callback passed\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      var _this2 = this;\n\n      if (!this.cursor) {\n        if (callback) return callback();\n        return this.promiseLibrary.resolve();\n      } // Tidy up the existing cursor\n\n\n      var cursor = this.cursor;\n\n      if (callback) {\n        return cursor.close(function (err) {\n          ['data', 'close', 'end', 'error'].forEach(function (event) {\n            return cursor.removeAllListeners(event);\n          });\n          delete _this2.cursor;\n          return callback(err);\n        });\n      }\n\n      var PromiseCtor = this.promiseLibrary || Promise;\n      return new PromiseCtor(function (resolve, reject) {\n        cursor.close(function (err) {\n          ['data', 'close', 'end', 'error'].forEach(function (event) {\n            return cursor.removeAllListeners(event);\n          });\n          delete _this2.cursor;\n          if (err) return reject(err);\n          resolve();\n        });\n      });\n    }\n    /**\n     * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n     * @method\n     * @param {Writable} destination The destination for writing data\n     * @param {object} [options] {@link https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options|Pipe options}\n     * @return {null}\n     */\n\n  }, {\n    key: \"pipe\",\n    value: function pipe(destination, options) {\n      if (!this.pipeDestinations) {\n        this.pipeDestinations = [];\n      }\n\n      this.pipeDestinations.push(destination);\n      return this.cursor.pipe(destination, options);\n    }\n    /**\n     * This method will remove the hooks set up for a previous pipe() call.\n     * @param {Writable} [destination] The destination for writing data\n     * @return {null}\n     */\n\n  }, {\n    key: \"unpipe\",\n    value: function unpipe(destination) {\n      if (this.pipeDestinations && this.pipeDestinations.indexOf(destination) > -1) {\n        this.pipeDestinations.splice(this.pipeDestinations.indexOf(destination), 1);\n      }\n\n      return this.cursor.unpipe(destination);\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     * @method\n     * @param {object} [options] Optional settings.\n     * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.\n     * @return {Cursor}\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream(options) {\n      this.streamOptions = options;\n      return this.cursor.stream(options);\n    }\n    /**\n     * This method will cause a stream in flowing mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n     * @return {null}\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      return this.cursor.pause();\n    }\n    /**\n     * This method will cause the readable stream to resume emitting data events.\n     * @return {null}\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      return this.cursor.resume();\n    }\n  }, {\n    key: \"resumeToken\",\n    get: function get() {\n      return this.cursor.resumeToken;\n    }\n  }]);\n\n  return ChangeStream;\n}(EventEmitter);\n\nvar ChangeStreamCursor = /*#__PURE__*/function (_Cursor) {\n  _inherits(ChangeStreamCursor, _Cursor);\n\n  function ChangeStreamCursor(topology, operation, options) {\n    var _this3;\n\n    _classCallCheck(this, ChangeStreamCursor);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ChangeStreamCursor).call(this, topology, operation, options));\n    options = options || {};\n    _this3._resumeToken = null;\n    _this3.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      _this3.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      _this3.resumeToken = options.resumeAfter;\n    }\n\n    return _this3;\n  }\n\n  _createClass(ChangeStreamCursor, [{\n    key: \"_initializeCursor\",\n    value: function _initializeCursor(callback) {\n      var _this4 = this;\n\n      _get(_getPrototypeOf(ChangeStreamCursor.prototype), \"_initializeCursor\", this).call(this, function (err, result) {\n        if (err) {\n          callback(err, null);\n          return;\n        }\n\n        var response = result.documents[0];\n\n        if (_this4.startAtOperationTime == null && _this4.resumeAfter == null && _this4.startAfter == null && maxWireVersion(_this4.server) >= 7) {\n          _this4.startAtOperationTime = response.operationTime;\n        }\n\n        var cursor = response.cursor;\n\n        if (cursor.postBatchResumeToken) {\n          _this4.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\n\n          if (cursor.firstBatch.length === 0) {\n            _this4.resumeToken = cursor.postBatchResumeToken;\n          }\n        }\n\n        _this4.emit('response');\n\n        callback(err, result);\n      });\n    }\n  }, {\n    key: \"_getMore\",\n    value: function _getMore(callback) {\n      var _this5 = this;\n\n      _get(_getPrototypeOf(ChangeStreamCursor.prototype), \"_getMore\", this).call(this, function (err, response) {\n        if (err) {\n          callback(err, null);\n          return;\n        }\n\n        var cursor = response.cursor;\n\n        if (cursor.postBatchResumeToken) {\n          _this5.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\n\n          if (cursor.nextBatch.length === 0) {\n            _this5.resumeToken = cursor.postBatchResumeToken;\n          }\n        }\n\n        _this5.emit('response');\n\n        callback(err, response);\n      });\n    }\n  }, {\n    key: \"resumeToken\",\n    set: function set(token) {\n      this._resumeToken = token;\n      this.emit('resumeTokenChanged', token);\n    },\n    get: function get() {\n      return this._resumeToken;\n    }\n  }, {\n    key: \"resumeOptions\",\n    get: function get() {\n      var result = {};\n\n      var _iterator = _createForOfIteratorHelper(CURSOR_OPTIONS),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var optionName = _step.value;\n          if (this.options[optionName]) result[optionName] = this.options[optionName];\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (this.resumeToken || this.startAtOperationTime) {\n        ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(function (key) {\n          return delete result[key];\n        });\n\n        if (this.resumeToken) {\n          result.resumeAfter = this.resumeToken;\n        } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\n          result.startAtOperationTime = this.startAtOperationTime;\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return ChangeStreamCursor;\n}(Cursor);\n/**\n * @event ChangeStreamCursor#response\n * internal event DO NOT USE\n * @ignore\n */\n// Create a new change stream cursor based on self's configuration\n\n\nfunction createChangeStreamCursor(self, options) {\n  var changeStreamStageOptions = {\n    fullDocument: options.fullDocument || 'default'\n  };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n\n  if (self.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  var pipeline = [{\n    $changeStream: changeStreamStageOptions\n  }].concat(self.pipeline);\n  var cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n  var changeStreamCursor = new ChangeStreamCursor(self.topology, new AggregateOperation(self.parent, pipeline, options), cursorOptions);\n  relayEvents(changeStreamCursor, self, ['resumeTokenChanged', 'end', 'close']);\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   *\n   * @event ChangeStream#change\n   * @type {object}\n   */\n\n  if (self.listenerCount('change') > 0) {\n    changeStreamCursor.on('data', function (change) {\n      processNewChange({\n        changeStream: self,\n        change: change,\n        eventEmitter: true\n      });\n    });\n  }\n  /**\n   * Change stream close event\n   *\n   * @event ChangeStream#close\n   * @type {null}\n   */\n\n  /**\n   * Change stream end event\n   *\n   * @event ChangeStream#end\n   * @type {null}\n   */\n\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   *\n   * @event ChangeStream#resumeTokenChanged\n   * @type {ResumeToken}\n   */\n\n  /**\n   * Fired when the stream encounters an error.\n   *\n   * @event ChangeStream#error\n   * @type {Error}\n   */\n\n\n  changeStreamCursor.on('error', function (error) {\n    processNewChange({\n      changeStream: self,\n      error: error,\n      eventEmitter: true\n    });\n  });\n\n  if (self.pipeDestinations) {\n    var cursorStream = changeStreamCursor.stream(self.streamOptions);\n\n    for (var pipeDestination in self.pipeDestinations) {\n      cursorStream.pipe(pipeDestination);\n    }\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target, source, optionNames) {\n  optionNames.forEach(function (name) {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n  return target;\n} // This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\n\n\nvar SELECTION_TIMEOUT = 30000;\n\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(function () {\n    if (options && options.start == null) options.start = process.hrtime();\n    var start = options.start || process.hrtime();\n    var timeout = options.timeout || SELECTION_TIMEOUT;\n    var readPreference = options.readPreference;\n    if (topology.isConnected({\n      readPreference: readPreference\n    })) return callback(null, null);\n    var hrElapsed = process.hrtime(start);\n    var elapsed = (hrElapsed[0] * 1e9 + hrElapsed[1]) / 1e6;\n    if (elapsed > timeout) return callback(new MongoError('Timed out waiting for connection'));\n    waitForTopologyConnected(topology, options, callback);\n  }, 3000); // this is an arbitrary wait time to allow SDAM to transition\n} // Handle new change events. This method brings together the routes from the callback, event emitter, and promise ways of using ChangeStream.\n\n\nfunction processNewChange(args) {\n  var changeStream = args.changeStream;\n  var error = args.error;\n  var change = args.change;\n  var callback = args.callback;\n  var eventEmitter = args.eventEmitter || false; // If the changeStream is closed, then it should not process a change.\n\n  if (changeStream.isClosed()) {\n    // We do not error in the eventEmitter case.\n    if (eventEmitter) {\n      return;\n    }\n\n    var _error = new MongoError('ChangeStream is closed');\n\n    return typeof callback === 'function' ? callback(_error, null) : changeStream.promiseLibrary.reject(_error);\n  }\n\n  var cursor = changeStream.cursor;\n  var topology = changeStream.topology;\n  var options = changeStream.cursor.options;\n\n  if (error) {\n    if (isResumableError(error) && !changeStream.attemptingResume) {\n      changeStream.attemptingResume = true; // stop listening to all events from old cursor\n\n      ['data', 'close', 'end', 'error'].forEach(function (event) {\n        return changeStream.cursor.removeAllListeners(event);\n      }); // close internal cursor, ignore errors\n\n      changeStream.cursor.close(); // attempt recreating the cursor\n\n      if (eventEmitter) {\n        waitForTopologyConnected(topology, {\n          readPreference: options.readPreference\n        }, function (err) {\n          if (err) {\n            changeStream.emit('error', err);\n            changeStream.emit('close');\n            return;\n          }\n\n          changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n        });\n        return;\n      }\n\n      if (callback) {\n        waitForTopologyConnected(topology, {\n          readPreference: options.readPreference\n        }, function (err) {\n          if (err) return callback(err, null);\n          changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n          changeStream.next(callback);\n        });\n        return;\n      }\n\n      return new Promise(function (resolve, reject) {\n        waitForTopologyConnected(topology, {\n          readPreference: options.readPreference\n        }, function (err) {\n          if (err) return reject(err);\n          resolve();\n        });\n      }).then(function () {\n        return changeStream.cursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n      }).then(function () {\n        return changeStream.next();\n      });\n    }\n\n    if (eventEmitter) return changeStream.emit('error', error);\n    if (typeof callback === 'function') return callback(error, null);\n    return changeStream.promiseLibrary.reject(error);\n  }\n\n  changeStream.attemptingResume = false;\n\n  if (change && !change._id) {\n    var noResumeTokenError = new Error('A change stream document has been received that lacks a resume token (_id).');\n    if (eventEmitter) return changeStream.emit('error', noResumeTokenError);\n    if (typeof callback === 'function') return callback(noResumeTokenError, null);\n    return changeStream.promiseLibrary.reject(noResumeTokenError);\n  } // cache the resume token\n\n\n  if (cursor.bufferedCount() === 0 && cursor.cursorState.postBatchResumeToken) {\n    cursor.resumeToken = cursor.cursorState.postBatchResumeToken;\n  } else {\n    cursor.resumeToken = change._id;\n  } // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n\n\n  changeStream.options.startAtOperationTime = undefined; // Return the change\n\n  if (eventEmitter) return changeStream.emit('change', change);\n  if (typeof callback === 'function') return callback(error, change);\n  return changeStream.promiseLibrary.resolve(change);\n}\n/**\n * The callback format for results\n * @callback ChangeStream~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n\nmodule.exports = ChangeStream;","map":null,"metadata":{},"sourceType":"script"}
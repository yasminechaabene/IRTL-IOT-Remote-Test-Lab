{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar Denque = require('denque');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Logger = require('../core/connection/logger');\n\nvar makeCounter = require('../utils').makeCounter;\n\nvar MongoError = require('../core/error').MongoError;\n\nvar Connection = require('./connection').Connection;\n\nvar eachAsync = require('../core/utils').eachAsync;\n\nvar connect = require('../core/connection/connect');\n\nvar relayEvents = require('../core/utils').relayEvents;\n\nvar errors = require('./errors');\n\nvar PoolClosedError = errors.PoolClosedError;\nvar WaitQueueTimeoutError = errors.WaitQueueTimeoutError;\n\nvar events = require('./events');\n\nvar ConnectionPoolCreatedEvent = events.ConnectionPoolCreatedEvent;\nvar ConnectionPoolClosedEvent = events.ConnectionPoolClosedEvent;\nvar ConnectionCreatedEvent = events.ConnectionCreatedEvent;\nvar ConnectionReadyEvent = events.ConnectionReadyEvent;\nvar ConnectionClosedEvent = events.ConnectionClosedEvent;\nvar ConnectionCheckOutStartedEvent = events.ConnectionCheckOutStartedEvent;\nvar ConnectionCheckOutFailedEvent = events.ConnectionCheckOutFailedEvent;\nvar ConnectionCheckedOutEvent = events.ConnectionCheckedOutEvent;\nvar ConnectionCheckedInEvent = events.ConnectionCheckedInEvent;\nvar ConnectionPoolClearedEvent = events.ConnectionPoolClearedEvent;\nvar kLogger = Symbol('logger');\nvar kConnections = Symbol('connections');\nvar kPermits = Symbol('permits');\nvar kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\nvar kGeneration = Symbol('generation');\nvar kConnectionCounter = Symbol('connectionCounter');\nvar kCancellationToken = Symbol('cancellationToken');\nvar kWaitQueue = Symbol('waitQueue');\nvar kCancelled = Symbol('cancelled');\nvar VALID_POOL_OPTIONS = new Set([// `connect` options\n'ssl', 'bson', 'connectionType', 'monitorCommands', 'socketTimeout', 'credentials', 'compression', // node Net options\n'host', 'port', 'localAddress', 'localPort', 'family', 'hints', 'lookup', 'path', // node TLS options\n'ca', 'cert', 'sigalgs', 'ciphers', 'clientCertEngine', 'crl', 'dhparam', 'ecdhCurve', 'honorCipherOrder', 'key', 'privateKeyEngine', 'privateKeyIdentifier', 'maxVersion', 'minVersion', 'passphrase', 'pfx', 'secureOptions', 'secureProtocol', 'sessionIdContext', 'allowHalfOpen', 'rejectUnauthorized', 'pskCallback', 'ALPNProtocols', 'servername', 'checkServerIdentity', 'session', 'minDHSize', 'secureContext', // spec options\n'maxPoolSize', 'minPoolSize', 'maxIdleTimeMS', 'waitQueueTimeoutMS']);\n\nfunction resolveOptions(options, defaults) {\n  var newOptions = Array.from(VALID_POOL_OPTIONS).reduce(function (obj, key) {\n    if (options.hasOwnProperty(key)) {\n      obj[key] = options[key];\n    }\n\n    return obj;\n  }, {});\n  return Object.freeze(Object.assign({}, defaults, newOptions));\n}\n/**\n * Configuration options for drivers wrapping the node driver.\n *\n * @typedef {Object} ConnectionPoolOptions\n * @property\n * @property {string} [host] The host to connect to\n * @property {number} [port] The port to connect to\n * @property {bson} [bson] The BSON instance to use for new connections\n * @property {number} [maxPoolSize=100] The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections.\n * @property {number} [minPoolSize=0] The minimum number of connections that MUST exist at any moment in a single connection pool.\n * @property {number} [maxIdleTimeMS] The maximum amount of time a connection should remain idle in the connection pool before being marked idle.\n * @property {number} [waitQueueTimeoutMS=0] The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit.\n */\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n *\n * @property {number} generation An integer representing the SDAM generation of the pool\n * @property {number} totalConnectionCount An integer expressing how many total connections (active + in use) the pool currently has\n * @property {number} availableConnectionCount An integer expressing how many connections are currently available in the pool.\n * @property {string} address The address of the endpoint the pool is connected to\n *\n * @emits ConnectionPool#connectionPoolCreated\n * @emits ConnectionPool#connectionPoolClosed\n * @emits ConnectionPool#connectionCreated\n * @emits ConnectionPool#connectionReady\n * @emits ConnectionPool#connectionClosed\n * @emits ConnectionPool#connectionCheckOutStarted\n * @emits ConnectionPool#connectionCheckOutFailed\n * @emits ConnectionPool#connectionCheckedOut\n * @emits ConnectionPool#connectionCheckedIn\n * @emits ConnectionPool#connectionPoolCleared\n */\n\n\nvar ConnectionPool = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(ConnectionPool, _EventEmitter);\n\n  /**\n   * Create a new Connection Pool\n   *\n   * @param {ConnectionPoolOptions} options\n   */\n  function ConnectionPool(options) {\n    var _this;\n\n    _classCallCheck(this, ConnectionPool);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionPool).call(this));\n    options = options || {};\n    _this.closed = false;\n    _this.options = resolveOptions(options, {\n      connectionType: Connection,\n      maxPoolSize: typeof options.maxPoolSize === 'number' ? options.maxPoolSize : 100,\n      minPoolSize: typeof options.minPoolSize === 'number' ? options.minPoolSize : 0,\n      maxIdleTimeMS: typeof options.maxIdleTimeMS === 'number' ? options.maxIdleTimeMS : 0,\n      waitQueueTimeoutMS: typeof options.waitQueueTimeoutMS === 'number' ? options.waitQueueTimeoutMS : 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (options.minSize > options.maxSize) {\n      throw new TypeError('Connection pool minimum size must not be greater than maxiumum pool size');\n    }\n\n    _this[kLogger] = Logger('ConnectionPool', options);\n    _this[kConnections] = new Denque();\n    _this[kPermits] = _this.options.maxPoolSize;\n    _this[kMinPoolSizeTimer] = undefined;\n    _this[kGeneration] = 0;\n    _this[kConnectionCounter] = makeCounter(1);\n    _this[kCancellationToken] = new EventEmitter();\n\n    _this[kCancellationToken].setMaxListeners(Infinity);\n\n    _this[kWaitQueue] = new Denque();\n    process.nextTick(function () {\n      _this.emit('connectionPoolCreated', new ConnectionPoolCreatedEvent(_assertThisInitialized(_assertThisInitialized(_this))));\n\n      ensureMinPoolSize(_assertThisInitialized(_assertThisInitialized(_this)));\n    });\n    return _this;\n  }\n\n  _createClass(ConnectionPool, [{\n    key: \"checkOut\",\n\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     *\n     * @param {ConnectionPool~checkOutCallback} callback\n     */\n    value: function checkOut(callback) {\n      this.emit('connectionCheckOutStarted', new ConnectionCheckOutStartedEvent(this));\n\n      if (this.closed) {\n        this.emit('connectionCheckOutFailed', new ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n        callback(new PoolClosedError(this));\n        return;\n      } // add this request to the wait queue\n\n\n      var waitQueueMember = {\n        callback: callback\n      };\n      var pool = this;\n      var waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n\n      if (waitQueueTimeoutMS) {\n        waitQueueMember.timer = setTimeout(function () {\n          waitQueueMember[kCancelled] = true;\n          waitQueueMember.timer = undefined;\n          pool.emit('connectionCheckOutFailed', new ConnectionCheckOutFailedEvent(pool, 'timeout'));\n          waitQueueMember.callback(new WaitQueueTimeoutError(pool));\n        }, waitQueueTimeoutMS);\n      } // place the member at the end of the wait queue\n\n\n      this[kWaitQueue].push(waitQueueMember); // process the wait queue\n\n      processWaitQueue(this);\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param {Connection} connection The connection to check in\n     */\n\n  }, {\n    key: \"checkIn\",\n    value: function checkIn(connection) {\n      var poolClosed = this.closed;\n      var stale = connectionIsStale(this, connection);\n      var willDestroy = !!(poolClosed || stale || connection.closed); // Properly adjust state of connection\n\n      if (!willDestroy) {\n        connection.markAvailable();\n        this[kConnections].push(connection);\n      }\n\n      this.emit('connectionCheckedIn', new ConnectionCheckedInEvent(this, connection));\n\n      if (willDestroy) {\n        var reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n        destroyConnection(this, connection, reason);\n      }\n\n      processWaitQueue(this);\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this[kGeneration] += 1;\n      this.emit('connectionPoolCleared', new ConnectionPoolClearedEvent(this));\n    }\n    /**\n     * Close the pool\n     *\n     * @param {object} [options] Optional settings\n     * @param {boolean} [options.force] Force close connections\n     * @param {Function} callback\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(options, callback) {\n      var _this2 = this;\n\n      if (typeof options === 'function') {\n        callback = options;\n      }\n\n      options = Object.assign({\n        force: false\n      }, options);\n\n      if (this.closed) {\n        return callback();\n      } // immediately cancel any in-flight connections\n\n\n      this[kCancellationToken].emit('cancel'); // drain the wait queue\n\n      while (this[kWaitQueue].length) {\n        var waitQueueMember = this[kWaitQueue].pop();\n        clearTimeout(waitQueueMember.timer);\n\n        if (!waitQueueMember[kCancelled]) {\n          waitQueueMember.callback(new MongoError('connection pool closed'));\n        }\n      } // clear the min pool size timer\n\n\n      if (this[kMinPoolSizeTimer]) {\n        clearTimeout(this[kMinPoolSizeTimer]);\n      } // end the connection counter\n\n\n      if (typeof this[kConnectionCounter].return === 'function') {\n        this[kConnectionCounter].return();\n      } // mark the pool as closed immediately\n\n\n      this.closed = true;\n      eachAsync(this[kConnections].toArray(), function (conn, cb) {\n        _this2.emit('connectionClosed', new ConnectionClosedEvent(_this2, conn, 'poolClosed'));\n\n        conn.destroy(options, cb);\n      }, function (err) {\n        _this2[kConnections].clear();\n\n        _this2.emit('connectionPoolClosed', new ConnectionPoolClosedEvent(_this2));\n\n        callback(err);\n      });\n    }\n    /**\n     * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n     * has completed by calling back.\n     *\n     * NOTE: please note the required signature of `fn`\n     *\n     * @param {ConnectionPool~withConnectionCallback} fn A function which operates on a managed connection\n     * @param {Function} callback The original callback\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"withConnection\",\n    value: function withConnection(fn, callback) {\n      var _this3 = this;\n\n      this.checkOut(function (err, conn) {\n        // don't callback with `err` here, we might want to act upon it inside `fn`\n        fn(err, conn, function (fnErr, result) {\n          if (typeof callback === 'function') {\n            if (fnErr) {\n              callback(fnErr);\n            } else {\n              callback(undefined, result);\n            }\n          }\n\n          if (conn) {\n            _this3.checkIn(conn);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return \"\".concat(this.options.host, \":\").concat(this.options.port);\n    }\n  }, {\n    key: \"generation\",\n    get: function get() {\n      return this[kGeneration];\n    }\n  }, {\n    key: \"totalConnectionCount\",\n    get: function get() {\n      return this[kConnections].length + (this.options.maxPoolSize - this[kPermits]);\n    }\n  }, {\n    key: \"availableConnectionCount\",\n    get: function get() {\n      return this[kConnections].length;\n    }\n  }]);\n\n  return ConnectionPool;\n}(EventEmitter);\n\nfunction ensureMinPoolSize(pool) {\n  if (pool.closed || pool.options.minPoolSize === 0) {\n    return;\n  }\n\n  var minPoolSize = pool.options.minPoolSize;\n\n  for (var i = pool.totalConnectionCount; i < minPoolSize; ++i) {\n    createConnection(pool);\n  }\n\n  pool[kMinPoolSizeTimer] = setTimeout(function () {\n    return ensureMinPoolSize(pool);\n  }, 10);\n}\n\nfunction connectionIsStale(pool, connection) {\n  return connection.generation !== pool[kGeneration];\n}\n\nfunction connectionIsIdle(pool, connection) {\n  return !!(pool.options.maxIdleTimeMS && connection.idleTime > pool.options.maxIdleTimeMS);\n}\n\nfunction createConnection(pool, callback) {\n  var connectOptions = Object.assign({\n    id: pool[kConnectionCounter].next().value,\n    generation: pool[kGeneration]\n  }, pool.options);\n  pool[kPermits]--;\n  connect(connectOptions, pool[kCancellationToken], function (err, connection) {\n    if (err) {\n      pool[kPermits]++;\n      pool[kLogger].debug(\"connection attempt failed with error [\".concat(JSON.stringify(err), \"]\"));\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n\n      return;\n    } // The pool might have closed since we started trying to create a connection\n\n\n    if (pool.closed) {\n      connection.destroy({\n        force: true\n      });\n      return;\n    } // forward all events from the connection to the pool\n\n\n    relayEvents(connection, pool, ['commandStarted', 'commandFailed', 'commandSucceeded', 'clusterTimeReceived']);\n    pool.emit('connectionCreated', new ConnectionCreatedEvent(pool, connection));\n    connection.markAvailable();\n    pool.emit('connectionReady', new ConnectionReadyEvent(pool, connection)); // if a callback has been provided, check out the connection immediately\n\n    if (typeof callback === 'function') {\n      callback(undefined, connection);\n      return;\n    } // otherwise add it to the pool for later acquisition, and try to process the wait queue\n\n\n    pool[kConnections].push(connection);\n    processWaitQueue(pool);\n  });\n}\n\nfunction destroyConnection(pool, connection, reason) {\n  pool.emit('connectionClosed', new ConnectionClosedEvent(pool, connection, reason)); // allow more connections to be created\n\n  pool[kPermits]++; // destroy the connection\n\n  process.nextTick(function () {\n    return connection.destroy();\n  });\n}\n\nfunction processWaitQueue(pool) {\n  if (pool.closed) {\n    return;\n  }\n\n  while (pool[kWaitQueue].length && pool.availableConnectionCount) {\n    var waitQueueMember = pool[kWaitQueue].peekFront();\n\n    if (waitQueueMember[kCancelled]) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    var connection = pool[kConnections].shift();\n    var isStale = connectionIsStale(pool, connection);\n    var isIdle = connectionIsIdle(pool, connection);\n\n    if (!isStale && !isIdle && !connection.closed) {\n      pool.emit('connectionCheckedOut', new ConnectionCheckedOutEvent(pool, connection));\n      clearTimeout(waitQueueMember.timer);\n      pool[kWaitQueue].shift();\n      waitQueueMember.callback(undefined, connection);\n      return;\n    }\n\n    var reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    destroyConnection(pool, connection, reason);\n  }\n\n  var maxPoolSize = pool.options.maxPoolSize;\n\n  if (pool[kWaitQueue].length && (maxPoolSize <= 0 || pool.totalConnectionCount < maxPoolSize)) {\n    createConnection(pool, function (err, connection) {\n      var waitQueueMember = pool[kWaitQueue].shift();\n\n      if (waitQueueMember == null) {\n        if (err == null) {\n          pool[kConnections].push(connection);\n        }\n\n        return;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        return;\n      }\n\n      if (err) {\n        pool.emit('connectionCheckOutFailed', new ConnectionCheckOutFailedEvent(pool, err));\n      } else {\n        pool.emit('connectionCheckedOut', new ConnectionCheckedOutEvent(pool, connection));\n      }\n\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(err, connection);\n    });\n    return;\n  }\n}\n/**\n * A callback provided to `withConnection`\n *\n * @callback ConnectionPool~withConnectionCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {Connection} connection The managed connection which was checked out of the pool.\n * @param {Function} callback A function to call back after connection management is complete\n */\n\n/**\n * A callback provided to `checkOut`\n *\n * @callback ConnectionPool~checkOutCallback\n * @param {MongoError} error An error instance representing the error during checkout\n * @param {Connection} connection A connection from the pool\n */\n\n/**\n * Emitted once when the connection pool is created\n *\n * @event ConnectionPool#connectionPoolCreated\n * @type {PoolCreatedEvent}\n */\n\n/**\n * Emitted once when the connection pool is closed\n *\n * @event ConnectionPool#connectionPoolClosed\n * @type {PoolClosedEvent}\n */\n\n/**\n * Emitted each time a connection is created\n *\n * @event ConnectionPool#connectionCreated\n * @type {ConnectionCreatedEvent}\n */\n\n/**\n * Emitted when a connection becomes established, and is ready to use\n *\n * @event ConnectionPool#connectionReady\n * @type {ConnectionReadyEvent}\n */\n\n/**\n * Emitted when a connection is closed\n *\n * @event ConnectionPool#connectionClosed\n * @type {ConnectionClosedEvent}\n */\n\n/**\n * Emitted when an attempt to check out a connection begins\n *\n * @event ConnectionPool#connectionCheckOutStarted\n * @type {ConnectionCheckOutStartedEvent}\n */\n\n/**\n * Emitted when an attempt to check out a connection fails\n *\n * @event ConnectionPool#connectionCheckOutFailed\n * @type {ConnectionCheckOutFailedEvent}\n */\n\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n *\n * @event ConnectionPool#connectionCheckedOut\n * @type {ConnectionCheckedOutEvent}\n */\n\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n *\n * @event ConnectionPool#connectionCheckedIn\n * @type {ConnectionCheckedInEvent}\n */\n\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n *\n * @event ConnectionPool#connectionPoolCleared\n * @type {PoolClearedEvent}\n */\n\n\nmodule.exports = {\n  ConnectionPool: ConnectionPool\n};","map":null,"metadata":{},"sourceType":"script"}
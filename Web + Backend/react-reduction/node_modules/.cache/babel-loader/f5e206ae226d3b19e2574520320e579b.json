{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\src\\\\components\\\\Typography.js\";\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'utils/propTypes';\nvar tagMap = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  'display-1': 'h1',\n  'display-2': 'h1',\n  'display-3': 'h1',\n  'display-4': 'h1',\n  p: 'p',\n  lead: 'p',\n  blockquote: 'blockquote'\n};\nvar types = Object.keys(tagMap);\n\nvar Typography = function Typography(_ref) {\n  var Tag = _ref.tag,\n      className = _ref.className,\n      type = _ref.type,\n      restProps = _objectWithoutProperties(_ref, [\"tag\", \"className\", \"type\"]);\n\n  var classes = classNames(_defineProperty({}, type, !!type), className);\n  var TypoComp;\n\n  if (Tag) {\n    TypoComp = Tag;\n  } else if (!Tag && tagMap[type]) {\n    TypoComp = tagMap[type];\n  } else {\n    TypoComp = 'p';\n  }\n\n  return /*#__PURE__*/React.createElement(TypoComp, Object.assign({}, restProps, {\n    className: classes,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }));\n};\n\nTypography.propTypes = {\n  tag: PropTypes.component,\n  className: PropTypes.string,\n  type: PropTypes.oneOf(types)\n};\nTypography.defaultProps = {\n  type: 'p'\n};\nexport default Typography;","map":{"version":3,"sources":["C:/Users/yosrj/Desktop/IOT_Lab/react-reduction/src/components/Typography.js"],"names":["classNames","React","PropTypes","tagMap","h1","h2","h3","h4","h5","h6","p","lead","blockquote","types","Object","keys","Typography","Tag","tag","className","type","restProps","classes","TypoComp","propTypes","component","string","oneOf","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,IAAMC,MAAM,GAAG;AACbC,EAAAA,EAAE,EAAE,IADS;AAEbC,EAAAA,EAAE,EAAE,IAFS;AAGbC,EAAAA,EAAE,EAAE,IAHS;AAIbC,EAAAA,EAAE,EAAE,IAJS;AAKbC,EAAAA,EAAE,EAAE,IALS;AAMbC,EAAAA,EAAE,EAAE,IANS;AAOb,eAAa,IAPA;AAQb,eAAa,IARA;AASb,eAAa,IATA;AAUb,eAAa,IAVA;AAWbC,EAAAA,CAAC,EAAE,GAXU;AAYbC,EAAAA,IAAI,EAAE,GAZO;AAabC,EAAAA,UAAU,EAAE;AAbC,CAAf;AAgBA,IAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYZ,MAAZ,CAAd;;AAEA,IAAMa,UAAU,GAAG,SAAbA,UAAa,OAAiD;AAAA,MAAzCC,GAAyC,QAA9CC,GAA8C;AAAA,MAApCC,SAAoC,QAApCA,SAAoC;AAAA,MAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,MAAhBC,SAAgB;;AAClE,MAAMC,OAAO,GAAGtB,UAAU,qBAAIoB,IAAJ,EAAW,CAAC,CAACA,IAAb,GAAqBD,SAArB,CAA1B;AACA,MAAII,QAAJ;;AAEA,MAAIN,GAAJ,EAAS;AACPM,IAAAA,QAAQ,GAAGN,GAAX;AACD,GAFD,MAEO,IAAI,CAACA,GAAD,IAAQd,MAAM,CAACiB,IAAD,CAAlB,EAA0B;AAC/BG,IAAAA,QAAQ,GAAGpB,MAAM,CAACiB,IAAD,CAAjB;AACD,GAFM,MAEA;AACLG,IAAAA,QAAQ,GAAG,GAAX;AACD;;AAED,sBAAO,oBAAC,QAAD,oBAAcF,SAAd;AAAyB,IAAA,SAAS,EAAEC,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAbD;;AAeAN,UAAU,CAACQ,SAAX,GAAuB;AACrBN,EAAAA,GAAG,EAAEhB,SAAS,CAACuB,SADM;AAErBN,EAAAA,SAAS,EAAEjB,SAAS,CAACwB,MAFA;AAGrBN,EAAAA,IAAI,EAAElB,SAAS,CAACyB,KAAV,CAAgBd,KAAhB;AAHe,CAAvB;AAMAG,UAAU,CAACY,YAAX,GAA0B;AACxBR,EAAAA,IAAI,EAAE;AADkB,CAA1B;AAIA,eAAeJ,UAAf","sourcesContent":["import classNames from 'classnames';\r\nimport React from 'react';\r\nimport PropTypes from 'utils/propTypes';\r\n\r\nconst tagMap = {\r\n  h1: 'h1',\r\n  h2: 'h2',\r\n  h3: 'h3',\r\n  h4: 'h4',\r\n  h5: 'h5',\r\n  h6: 'h6',\r\n  'display-1': 'h1',\r\n  'display-2': 'h1',\r\n  'display-3': 'h1',\r\n  'display-4': 'h1',\r\n  p: 'p',\r\n  lead: 'p',\r\n  blockquote: 'blockquote',\r\n};\r\n\r\nconst types = Object.keys(tagMap);\r\n\r\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\r\n  const classes = classNames({ [type]: !!type }, className);\r\n  let TypoComp;\r\n\r\n  if (Tag) {\r\n    TypoComp = Tag;\r\n  } else if (!Tag && tagMap[type]) {\r\n    TypoComp = tagMap[type];\r\n  } else {\r\n    TypoComp = 'p';\r\n  }\r\n\r\n  return <TypoComp {...restProps} className={classes} />;\r\n};\r\n\r\nTypography.propTypes = {\r\n  tag: PropTypes.component,\r\n  className: PropTypes.string,\r\n  type: PropTypes.oneOf(types),\r\n};\r\n\r\nTypography.defaultProps = {\r\n  type: 'p',\r\n};\r\n\r\nexport default Typography;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar CommandOperation = require('./command');\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar MongoError = require('../core').MongoError;\n\nvar parseIndexOptions = require('../utils').parseIndexOptions;\n\nvar keysToOmit = new Set(['name', 'key', 'writeConcern', 'w', 'wtimeout', 'j', 'fsync', 'readPreference', 'session']);\n\nvar CreateIndexOperation = /*#__PURE__*/function (_CommandOperation) {\n  _inherits(CreateIndexOperation, _CommandOperation);\n\n  function CreateIndexOperation(db, name, fieldOrSpec, options) {\n    var _this;\n\n    _classCallCheck(this, CreateIndexOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateIndexOperation).call(this, db, options)); // Build the index\n\n    var indexParameters = parseIndexOptions(fieldOrSpec); // Generate the index name\n\n    var indexName = typeof options.name === 'string' ? options.name : indexParameters.name; // Set up the index\n\n    var indexesObject = {\n      name: indexName,\n      key: indexParameters.fieldHash\n    };\n    _this.name = name;\n    _this.fieldOrSpec = fieldOrSpec;\n    _this.indexes = indexesObject;\n    return _this;\n  }\n\n  _createClass(CreateIndexOperation, [{\n    key: \"_buildCommand\",\n    value: function _buildCommand() {\n      var options = this.options;\n      var name = this.name;\n      var indexes = this.indexes; // merge all the options\n\n      for (var optionName in options) {\n        if (!keysToOmit.has(optionName)) {\n          indexes[optionName] = options[optionName];\n        }\n      } // Create command, apply write concern to command\n\n\n      var cmd = {\n        createIndexes: name,\n        indexes: [indexes]\n      };\n      return cmd;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(callback) {\n      var db = this.db;\n      var options = this.options;\n      var indexes = this.indexes; // Get capabilities\n\n      var capabilities = db.s.topology.capabilities(); // Did the user pass in a collation, check if our write server supports it\n\n      if (options.collation && capabilities && !capabilities.commandsTakeCollation) {\n        // Create a new error\n        var error = new MongoError('server/primary/mongos does not support collation');\n        error.code = 67; // Return the error\n\n        return callback(error);\n      } // Ensure we have a callback\n\n\n      if (options.writeConcern && typeof callback !== 'function') {\n        throw MongoError.create({\n          message: 'Cannot use a writeConcern without a provided callback',\n          driver: true\n        });\n      } // Attempt to run using createIndexes command\n\n\n      _get(_getPrototypeOf(CreateIndexOperation.prototype), \"execute\", this).call(this, function (err, result) {\n        if (err == null) return handleCallback(callback, err, indexes.name);\n        return handleCallback(callback, err, result);\n      });\n    }\n  }]);\n\n  return CreateIndexOperation;\n}(CommandOperation);\n\ndefineAspects(CreateIndexOperation, Aspect.WRITE_OPERATION);\nmodule.exports = CreateIndexOperation;","map":null,"metadata":{},"sourceType":"script"}
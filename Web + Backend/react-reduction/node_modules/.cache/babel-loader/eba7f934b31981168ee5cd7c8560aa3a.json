{"ast":null,"code":"'use strict';\n/**\n * Published when server description changes, but does NOT include changes to the RTT.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {ServerDescription} previousDescription The previous server description\n * @property {ServerDescription} newDescription The new server description\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar ServerDescriptionChangedEvent = function ServerDescriptionChangedEvent(topologyId, address, previousDescription, newDescription) {\n  _classCallCheck(this, ServerDescriptionChangedEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId,\n    address: address,\n    previousDescription: previousDescription,\n    newDescription: newDescription\n  });\n};\n/**\n * Published when server is initialized.\n *\n * @property {Object} topologyId A unique identifier for the topology\n * @property {ServerAddress} address The address (host/port pair) of the server\n */\n\n\nvar ServerOpeningEvent = function ServerOpeningEvent(topologyId, address) {\n  _classCallCheck(this, ServerOpeningEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId,\n    address: address\n  });\n};\n/**\n * Published when server is closed.\n *\n * @property {ServerAddress} address The address (host/port pair) of the server\n * @property {Object} topologyId A unique identifier for the topology\n */\n\n\nvar ServerClosedEvent = function ServerClosedEvent(topologyId, address) {\n  _classCallCheck(this, ServerClosedEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId,\n    address: address\n  });\n};\n/**\n * Published when topology description changes.\n *\n * @property {Object} topologyId\n * @property {TopologyDescription} previousDescription The old topology description\n * @property {TopologyDescription} newDescription The new topology description\n */\n\n\nvar TopologyDescriptionChangedEvent = function TopologyDescriptionChangedEvent(topologyId, previousDescription, newDescription) {\n  _classCallCheck(this, TopologyDescriptionChangedEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId,\n    previousDescription: previousDescription,\n    newDescription: newDescription\n  });\n};\n/**\n * Published when topology is initialized.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\n\n\nvar TopologyOpeningEvent = function TopologyOpeningEvent(topologyId) {\n  _classCallCheck(this, TopologyOpeningEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId\n  });\n};\n/**\n * Published when topology is closed.\n *\n * @param {Object} topologyId A unique identifier for the topology\n */\n\n\nvar TopologyClosedEvent = function TopologyClosedEvent(topologyId) {\n  _classCallCheck(this, TopologyClosedEvent);\n\n  Object.assign(this, {\n    topologyId: topologyId\n  });\n};\n/**\n * Fired when the server monitor’s ismaster command is started - immediately before\n * the ismaster command is serialized into raw BSON and written to the socket.\n *\n * @property {Object} connectionId The connection id for the command\n */\n\n\nvar ServerHeartbeatStartedEvent = function ServerHeartbeatStartedEvent(connectionId) {\n  _classCallCheck(this, ServerHeartbeatStartedEvent);\n\n  Object.assign(this, {\n    connectionId: connectionId\n  });\n};\n/**\n * Fired when the server monitor’s ismaster succeeds.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {Object} reply The command reply\n * @param {Object} connectionId The connection id for the command\n */\n\n\nvar ServerHeartbeatSucceededEvent = function ServerHeartbeatSucceededEvent(duration, reply, connectionId) {\n  _classCallCheck(this, ServerHeartbeatSucceededEvent);\n\n  Object.assign(this, {\n    connectionId: connectionId,\n    duration: duration,\n    reply: reply\n  });\n};\n/**\n * Fired when the server monitor’s ismaster fails, either with an “ok: 0” or a socket exception.\n *\n * @param {Number} duration The execution time of the event in ms\n * @param {MongoError|Object} failure The command failure\n * @param {Object} connectionId The connection id for the command\n */\n\n\nvar ServerHeartbeatFailedEvent = function ServerHeartbeatFailedEvent(duration, failure, connectionId) {\n  _classCallCheck(this, ServerHeartbeatFailedEvent);\n\n  Object.assign(this, {\n    connectionId: connectionId,\n    duration: duration,\n    failure: failure\n  });\n};\n\nmodule.exports = {\n  ServerDescriptionChangedEvent: ServerDescriptionChangedEvent,\n  ServerOpeningEvent: ServerOpeningEvent,\n  ServerClosedEvent: ServerClosedEvent,\n  TopologyDescriptionChangedEvent: TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent: TopologyOpeningEvent,\n  TopologyClosedEvent: TopologyClosedEvent,\n  ServerHeartbeatStartedEvent: ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent: ServerHeartbeatSucceededEvent,\n  ServerHeartbeatFailedEvent: ServerHeartbeatFailedEvent\n};","map":null,"metadata":{},"sourceType":"script"}
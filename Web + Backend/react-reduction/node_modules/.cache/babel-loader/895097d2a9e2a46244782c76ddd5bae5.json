{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar buildCountCommand = require('./common_functions').buildCountCommand;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar CountOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(CountOperation, _OperationBase);\n\n  function CountOperation(cursor, applySkipLimit, options) {\n    var _this;\n\n    _classCallCheck(this, CountOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CountOperation).call(this, options));\n    _this.cursor = cursor;\n    _this.applySkipLimit = applySkipLimit;\n    return _this;\n  }\n\n  _createClass(CountOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var cursor = this.cursor;\n      var applySkipLimit = this.applySkipLimit;\n      var options = this.options;\n\n      if (applySkipLimit) {\n        if (typeof cursor.cursorSkip() === 'number') options.skip = cursor.cursorSkip();\n        if (typeof cursor.cursorLimit() === 'number') options.limit = cursor.cursorLimit();\n      } // Ensure we have the right read preference inheritance\n\n\n      if (options.readPreference) {\n        cursor.setReadPreference(options.readPreference);\n      }\n\n      if (typeof options.maxTimeMS !== 'number' && cursor.cmd && typeof cursor.cmd.maxTimeMS === 'number') {\n        options.maxTimeMS = cursor.cmd.maxTimeMS;\n      }\n\n      var finalOptions = {};\n      finalOptions.skip = options.skip;\n      finalOptions.limit = options.limit;\n      finalOptions.hint = options.hint;\n      finalOptions.maxTimeMS = options.maxTimeMS; // Command\n\n      finalOptions.collectionName = cursor.namespace.collection;\n      var command;\n\n      try {\n        command = buildCountCommand(cursor, cursor.cmd.query, finalOptions);\n      } catch (err) {\n        return callback(err);\n      } // Set cursor server to the same as the topology\n\n\n      cursor.server = cursor.topology.s.coreTopology; // Execute the command\n\n      cursor.topology.command(cursor.namespace.withCollection('$cmd'), command, cursor.options, function (err, result) {\n        callback(err, result ? result.result.n : null);\n      });\n    }\n  }]);\n\n  return CountOperation;\n}(OperationBase);\n\nmodule.exports = CountOperation;","map":null,"metadata":{},"sourceType":"script"}
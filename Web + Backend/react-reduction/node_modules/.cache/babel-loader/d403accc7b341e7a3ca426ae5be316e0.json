{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Instrumentation = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Instrumentation, _EventEmitter);\n\n  function Instrumentation() {\n    _classCallCheck(this, Instrumentation);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Instrumentation).call(this));\n  }\n\n  _createClass(Instrumentation, [{\n    key: \"instrument\",\n    value: function instrument(MongoClient, callback) {\n      // store a reference to the original functions\n      this.$MongoClient = MongoClient;\n      var $prototypeConnect = this.$prototypeConnect = MongoClient.prototype.connect;\n      var instrumentation = this;\n\n      MongoClient.prototype.connect = function (callback) {\n        this.s.options.monitorCommands = true;\n        this.on('commandStarted', function (event) {\n          return instrumentation.emit('started', event);\n        });\n        this.on('commandSucceeded', function (event) {\n          return instrumentation.emit('succeeded', event);\n        });\n        this.on('commandFailed', function (event) {\n          return instrumentation.emit('failed', event);\n        });\n        return $prototypeConnect.call(this, callback);\n      };\n\n      if (typeof callback === 'function') callback(null, this);\n    }\n  }, {\n    key: \"uninstrument\",\n    value: function uninstrument() {\n      this.$MongoClient.prototype.connect = this.$prototypeConnect;\n    }\n  }]);\n\n  return Instrumentation;\n}(EventEmitter);\n\nmodule.exports = Instrumentation;","map":null,"metadata":{},"sourceType":"script"}
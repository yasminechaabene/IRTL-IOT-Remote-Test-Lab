{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar applyWriteConcern = require('../utils').applyWriteConcern;\n\nvar Code = require('../core').BSON.Code;\n\nvar decorateWithCollation = require('../utils').decorateWithCollation;\n\nvar decorateWithReadConcern = require('../utils').decorateWithReadConcern;\n\nvar executeCommand = require('./db_ops').executeCommand;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar isObject = require('../utils').isObject;\n\nvar loadDb = require('../dynamic_loaders').loadDb;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar resolveReadPreference = require('../utils').resolveReadPreference;\n\nvar toError = require('../utils').toError;\n\nvar exclusionList = ['readPreference', 'session', 'bypassDocumentValidation', 'w', 'wtimeout', 'j', 'writeConcern'];\n/**\n * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {(function|string)} map The mapping function.\n * @property {(function|string)} reduce The reduce function.\n * @property {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n */\n\nvar MapReduceOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(MapReduceOperation, _OperationBase);\n\n  /**\n   * Constructs a MapReduce operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {(function|string)} map The mapping function.\n   * @param {(function|string)} reduce The reduce function.\n   * @param {object} [options] Optional settings. See Collection.prototype.mapReduce for a list of options.\n   */\n  function MapReduceOperation(collection, map, reduce, options) {\n    var _this;\n\n    _classCallCheck(this, MapReduceOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapReduceOperation).call(this, options));\n    _this.collection = collection;\n    _this.map = map;\n    _this.reduce = reduce;\n    return _this;\n  }\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n\n\n  _createClass(MapReduceOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var map = this.map;\n      var reduce = this.reduce;\n      var options = this.options;\n      var mapCommandHash = {\n        mapreduce: coll.collectionName,\n        map: map,\n        reduce: reduce\n      }; // Add any other options passed in\n\n      for (var n in options) {\n        if ('scope' === n) {\n          mapCommandHash[n] = processScope(options[n]);\n        } else {\n          // Only include if not in exclusion list\n          if (exclusionList.indexOf(n) === -1) {\n            mapCommandHash[n] = options[n];\n          }\n        }\n      }\n\n      options = Object.assign({}, options); // Ensure we have the right read preference inheritance\n\n      options.readPreference = resolveReadPreference(coll, options); // If we have a read preference and inline is not set as output fail hard\n\n      if (options.readPreference !== false && options.readPreference !== 'primary' && options['out'] && options['out'].inline !== 1 && options['out'] !== 'inline') {\n        // Force readPreference to primary\n        options.readPreference = 'primary'; // Decorate command with writeConcern if supported\n\n        applyWriteConcern(mapCommandHash, {\n          db: coll.s.db,\n          collection: coll\n        }, options);\n      } else {\n        decorateWithReadConcern(mapCommandHash, coll, options);\n      } // Is bypassDocumentValidation specified\n\n\n      if (options.bypassDocumentValidation === true) {\n        mapCommandHash.bypassDocumentValidation = options.bypassDocumentValidation;\n      } // Have we specified collation\n\n\n      try {\n        decorateWithCollation(mapCommandHash, coll, options);\n      } catch (err) {\n        return callback(err, null);\n      } // Execute command\n\n\n      executeCommand(coll.s.db, mapCommandHash, options, function (err, result) {\n        if (err) return handleCallback(callback, err); // Check if we have an error\n\n        if (1 !== result.ok || result.err || result.errmsg) {\n          return handleCallback(callback, toError(result));\n        } // Create statistics value\n\n\n        var stats = {};\n        if (result.timeMillis) stats['processtime'] = result.timeMillis;\n        if (result.counts) stats['counts'] = result.counts;\n        if (result.timing) stats['timing'] = result.timing; // invoked with inline?\n\n        if (result.results) {\n          // If we wish for no verbosity\n          if (options['verbose'] == null || !options['verbose']) {\n            return handleCallback(callback, null, result.results);\n          }\n\n          return handleCallback(callback, null, {\n            results: result.results,\n            stats: stats\n          });\n        } // The returned collection\n\n\n        var collection = null; // If we have an object it's a different db\n\n        if (result.result != null && typeof result.result === 'object') {\n          var doc = result.result; // Return a collection from another db\n\n          var Db = loadDb();\n          collection = new Db(doc.db, coll.s.db.s.topology, coll.s.db.s.options).collection(doc.collection);\n        } else {\n          // Create a collection object that wraps the result collection\n          collection = coll.s.db.collection(result.result);\n        } // If we wish for no verbosity\n\n\n        if (options['verbose'] == null || !options['verbose']) {\n          return handleCallback(callback, err, collection);\n        } // Return stats as third set of values\n\n\n        handleCallback(callback, err, {\n          collection: collection,\n          stats: stats\n        });\n      });\n    }\n  }]);\n\n  return MapReduceOperation;\n}(OperationBase);\n/**\n * Functions that are passed as scope args must\n * be converted to Code instances.\n * @ignore\n */\n\n\nfunction processScope(scope) {\n  if (!isObject(scope) || scope._bsontype === 'ObjectID') {\n    return scope;\n  }\n\n  var keys = Object.keys(scope);\n  var key;\n  var new_scope = {};\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    key = keys[i];\n\n    if ('function' === typeof scope[key]) {\n      new_scope[key] = new Code(String(scope[key]));\n    } else {\n      new_scope[key] = processScope(scope[key]);\n    }\n  }\n\n  return new_scope;\n}\n\nmodule.exports = MapReduceOperation;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar applyRetryableWrites = require('../utils').applyRetryableWrites;\n\nvar applyWriteConcern = require('../utils').applyWriteConcern;\n\nvar MongoError = require('../core').MongoError;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar BulkWriteOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(BulkWriteOperation, _OperationBase);\n\n  function BulkWriteOperation(collection, operations, options) {\n    var _this;\n\n    _classCallCheck(this, BulkWriteOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BulkWriteOperation).call(this, options));\n    _this.collection = collection;\n    _this.operations = operations;\n    return _this;\n  }\n\n  _createClass(BulkWriteOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var operations = this.operations;\n      var options = this.options; // Add ignoreUndfined\n\n      if (coll.s.options.ignoreUndefined) {\n        options = Object.assign({}, options);\n        options.ignoreUndefined = coll.s.options.ignoreUndefined;\n      } // Create the bulk operation\n\n\n      var bulk = options.ordered === true || options.ordered == null ? coll.initializeOrderedBulkOp(options) : coll.initializeUnorderedBulkOp(options); // Do we have a collation\n\n      var collation = false; // for each op go through and add to the bulk\n\n      try {\n        for (var i = 0; i < operations.length; i++) {\n          // Get the operation type\n          var key = Object.keys(operations[i])[0]; // Check if we have a collation\n\n          if (operations[i][key].collation) {\n            collation = true;\n          } // Pass to the raw bulk\n\n\n          bulk.raw(operations[i]);\n        }\n      } catch (err) {\n        return callback(err, null);\n      } // Final options for retryable writes and write concern\n\n\n      var finalOptions = Object.assign({}, options);\n      finalOptions = applyRetryableWrites(finalOptions, coll.s.db);\n      finalOptions = applyWriteConcern(finalOptions, {\n        db: coll.s.db,\n        collection: coll\n      }, options);\n      var writeCon = finalOptions.writeConcern ? finalOptions.writeConcern : {};\n      var capabilities = coll.s.topology.capabilities(); // Did the user pass in a collation, check if our write server supports it\n\n      if (collation && capabilities && !capabilities.commandsTakeCollation) {\n        return callback(new MongoError('server/primary/mongos does not support collation'));\n      } // Execute the bulk\n\n\n      bulk.execute(writeCon, finalOptions, function (err, r) {\n        // We have connection level error\n        if (!r && err) {\n          return callback(err, null);\n        }\n\n        r.insertedCount = r.nInserted;\n        r.matchedCount = r.nMatched;\n        r.modifiedCount = r.nModified || 0;\n        r.deletedCount = r.nRemoved;\n        r.upsertedCount = r.getUpsertedIds().length;\n        r.upsertedIds = {};\n        r.insertedIds = {}; // Update the n\n\n        r.n = r.insertedCount; // Inserted documents\n\n        var inserted = r.getInsertedIds(); // Map inserted ids\n\n        for (var _i = 0; _i < inserted.length; _i++) {\n          r.insertedIds[inserted[_i].index] = inserted[_i]._id;\n        } // Upserted documents\n\n\n        var upserted = r.getUpsertedIds(); // Map upserted ids\n\n        for (var _i2 = 0; _i2 < upserted.length; _i2++) {\n          r.upsertedIds[upserted[_i2].index] = upserted[_i2]._id;\n        } // Return the results\n\n\n        callback(null, r);\n      });\n    }\n  }]);\n\n  return BulkWriteOperation;\n}(OperationBase);\n\nmodule.exports = BulkWriteOperation;","map":null,"metadata":{},"sourceType":"script"}
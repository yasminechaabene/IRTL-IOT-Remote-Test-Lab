{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar CommandOperationV2 = require('./command_v2');\n\nvar MongoError = require('../core').MongoError;\n\nvar maxWireVersion = require('../core/utils').maxWireVersion;\n\nvar ReadPreference = require('../core').ReadPreference;\n\nvar Aspect = require('./operation').Aspect;\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar DB_AGGREGATE_COLLECTION = 1;\nvar MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n\nvar AggregateOperation = /*#__PURE__*/function (_CommandOperationV) {\n  _inherits(AggregateOperation, _CommandOperationV);\n\n  function AggregateOperation(parent, pipeline, options) {\n    var _this;\n\n    _classCallCheck(this, AggregateOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AggregateOperation).call(this, parent, options, {\n      fullResponse: true\n    }));\n    _this.target = parent.s.namespace && parent.s.namespace.collection ? parent.s.namespace.collection : DB_AGGREGATE_COLLECTION;\n    _this.pipeline = pipeline; // determine if we have a write stage, override read preference if so\n\n    _this.hasWriteStage = false;\n\n    if (typeof options.out === 'string') {\n      _this.pipeline = _this.pipeline.concat({\n        $out: options.out\n      });\n      _this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      var finalStage = pipeline[pipeline.length - 1];\n\n      if (finalStage.$out || finalStage.$merge) {\n        _this.hasWriteStage = true;\n      }\n    }\n\n    if (_this.hasWriteStage) {\n      _this.readPreference = ReadPreference.primary;\n    }\n\n    if (options.explain && (_this.readConcern || _this.writeConcern)) {\n      throw new MongoError('\"explain\" cannot be used on an aggregate call with readConcern/writeConcern');\n    }\n\n    if (options.cursor != null && typeof options.cursor !== 'object') {\n      throw new MongoError('cursor options must be an object');\n    }\n\n    return _this;\n  }\n\n  _createClass(AggregateOperation, [{\n    key: \"addToPipeline\",\n    value: function addToPipeline(stage) {\n      this.pipeline.push(stage);\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(server, callback) {\n      var options = this.options;\n      var serverWireVersion = maxWireVersion(server);\n      var command = {\n        aggregate: this.target,\n        pipeline: this.pipeline\n      };\n\n      if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n        this.readConcern = null;\n      }\n\n      if (serverWireVersion >= 5) {\n        if (this.hasWriteStage && this.writeConcern) {\n          Object.assign(command, {\n            writeConcern: this.writeConcern\n          });\n        }\n      }\n\n      if (options.bypassDocumentValidation === true) {\n        command.bypassDocumentValidation = options.bypassDocumentValidation;\n      }\n\n      if (typeof options.allowDiskUse === 'boolean') {\n        command.allowDiskUse = options.allowDiskUse;\n      }\n\n      if (options.hint) {\n        command.hint = options.hint;\n      }\n\n      if (options.explain) {\n        options.full = false;\n        command.explain = options.explain;\n      }\n\n      command.cursor = options.cursor || {};\n\n      if (options.batchSize && !this.hasWriteStage) {\n        command.cursor.batchSize = options.batchSize;\n      }\n\n      _get(_getPrototypeOf(AggregateOperation.prototype), \"executeCommand\", this).call(this, server, command, callback);\n    }\n  }, {\n    key: \"canRetryRead\",\n    get: function get() {\n      return !this.hasWriteStage;\n    }\n  }]);\n\n  return AggregateOperation;\n}(CommandOperationV2);\n\ndefineAspects(AggregateOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION]);\nmodule.exports = AggregateOperation;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar BulkWriteOperation = require('./bulk_write');\n\nvar MongoError = require('../core').MongoError;\n\nvar prepareDocs = require('./common_functions').prepareDocs;\n\nvar InsertManyOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(InsertManyOperation, _OperationBase);\n\n  function InsertManyOperation(collection, docs, options) {\n    var _this;\n\n    _classCallCheck(this, InsertManyOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InsertManyOperation).call(this, options));\n    _this.collection = collection;\n    _this.docs = docs;\n    return _this;\n  }\n\n  _createClass(InsertManyOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var docs = this.docs;\n      var options = this.options;\n\n      if (!Array.isArray(docs)) {\n        return callback(MongoError.create({\n          message: 'docs parameter must be an array of documents',\n          driver: true\n        }));\n      } // If keep going set unordered\n\n\n      options['serializeFunctions'] = options['serializeFunctions'] || coll.s.serializeFunctions;\n      docs = prepareDocs(coll, docs, options); // Generate the bulk write operations\n\n      var operations = [{\n        insertMany: docs\n      }];\n      var bulkWriteOperation = new BulkWriteOperation(coll, operations, options);\n      bulkWriteOperation.execute(function (err, result) {\n        if (err) return callback(err, null);\n        callback(null, mapInsertManyResults(docs, result));\n      });\n    }\n  }]);\n\n  return InsertManyOperation;\n}(OperationBase);\n\nfunction mapInsertManyResults(docs, r) {\n  var finalResult = {\n    result: {\n      ok: 1,\n      n: r.insertedCount\n    },\n    ops: docs,\n    insertedCount: r.insertedCount,\n    insertedIds: r.insertedIds\n  };\n\n  if (r.getLastOp()) {\n    finalResult.result.opTime = r.getLastOp();\n  }\n\n  return finalResult;\n}\n\nmodule.exports = InsertManyOperation;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar _defineProperty = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _makeStateMachine;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Denque = require('denque');\n\nvar EventEmitter = require('events');\n\nvar ServerDescription = require('./server_description').ServerDescription;\n\nvar ServerType = require('./common').ServerType;\n\nvar TopologyDescription = require('./topology_description').TopologyDescription;\n\nvar TopologyType = require('./common').TopologyType;\n\nvar events = require('./events');\n\nvar Server = require('./server').Server;\n\nvar relayEvents = require('../utils').relayEvents;\n\nvar ReadPreference = require('../topologies/read_preference');\n\nvar isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\n\nvar CoreCursor = require('../cursor').CoreCursor;\n\nvar deprecate = require('util').deprecate;\n\nvar BSON = require('../connection/utils').retrieveBSON();\n\nvar createCompressionInfo = require('../topologies/shared').createCompressionInfo;\n\nvar isRetryableError = require('../error').isRetryableError;\n\nvar ClientSession = require('../sessions').ClientSession;\n\nvar MongoError = require('../error').MongoError;\n\nvar MongoServerSelectionError = require('../error').MongoServerSelectionError;\n\nvar resolveClusterTime = require('../topologies/shared').resolveClusterTime;\n\nvar SrvPoller = require('./srv_polling').SrvPoller;\n\nvar getMMAPError = require('../topologies/shared').getMMAPError;\n\nvar makeStateMachine = require('../utils').makeStateMachine;\n\nvar eachAsync = require('../utils').eachAsync;\n\nvar emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\n\nvar ServerSessionPool = require('../sessions').ServerSessionPool;\n\nvar makeClientMetadata = require('../utils').makeClientMetadata;\n\nvar CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\n\nvar common = require('./common');\n\nvar drainTimerQueue = common.drainTimerQueue;\nvar clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\n\nvar serverSelection = require('./server_selection');\n\nvar readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\nvar writableServerSelector = serverSelection.writableServerSelector; // Global state\n\nvar globalTopologyCounter = 0; // events that we relay to the `Topology`\n\nvar SERVER_RELAY_EVENTS = ['serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', 'commandStarted', 'commandSucceeded', 'commandFailed', // NOTE: Legacy events\n'monitoring'].concat(CMAP_EVENT_NAMES); // all events we listen to from `Server` instances\n\nvar LOCAL_SERVER_EVENTS = ['connect', 'descriptionReceived', 'close', 'ended'];\nvar STATE_CLOSING = common.STATE_CLOSING;\nvar STATE_CLOSED = common.STATE_CLOSED;\nvar STATE_CONNECTING = common.STATE_CONNECTING;\nvar STATE_CONNECTED = common.STATE_CONNECTED;\nvar stateTransition = makeStateMachine((_makeStateMachine = {}, _defineProperty(_makeStateMachine, STATE_CLOSED, [STATE_CLOSED, STATE_CONNECTING]), _defineProperty(_makeStateMachine, STATE_CONNECTING, [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED]), _defineProperty(_makeStateMachine, STATE_CONNECTED, [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED]), _defineProperty(_makeStateMachine, STATE_CLOSING, [STATE_CLOSING, STATE_CLOSED]), _makeStateMachine));\nvar DEPRECATED_OPTIONS = new Set(['autoReconnect', 'reconnectTries', 'reconnectInterval', 'bufferMaxEntries']);\nvar kCancelled = Symbol('cancelled');\nvar kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n *\n * @fires Topology#serverOpening\n * @fires Topology#serverClosed\n * @fires Topology#serverDescriptionChanged\n * @fires Topology#topologyOpening\n * @fires Topology#topologyClosed\n * @fires Topology#topologyDescriptionChanged\n * @fires Topology#serverHeartbeatStarted\n * @fires Topology#serverHeartbeatSucceeded\n * @fires Topology#serverHeartbeatFailed\n */\n\nvar Topology = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Topology, _EventEmitter);\n\n  /**\n   * Create a topology\n   *\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\n   */\n  function Topology(seedlist, options) {\n    var _this;\n\n    _classCallCheck(this, Topology);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Topology).call(this));\n\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = []; // this is for legacy single server constructor support\n\n      if (options.host) {\n        seedlist.push({\n          host: options.host,\n          port: options.port\n        });\n      }\n    }\n\n    seedlist = seedlist || [];\n\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\n    options = Object.freeze(Object.assign(options, {\n      metadata: makeClientMetadata(options),\n      compression: {\n        compressors: createCompressionInfo(options)\n      }\n    }));\n    DEPRECATED_OPTIONS.forEach(function (optionName) {\n      if (options[optionName]) {\n        emitDeprecationWarning(\"The option `\".concat(optionName, \"` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6\"), 'DeprecationWarning');\n      }\n    });\n    var topologyType = topologyTypeFromSeedlist(seedlist, options);\n    var topologyId = globalTopologyCounter++;\n    var serverDescriptions = seedlist.reduce(function (result, seed) {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      var address = seed.port ? \"\".concat(seed.host, \":\").concat(seed.port) : \"\".concat(seed.host, \":27017\");\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n    _this[kWaitQueue] = new Denque();\n    _this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options: options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(topologyType, serverDescriptions, options.replicaSet, null, null, null, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(_assertThisInitialized(_assertThisInitialized(_this))),\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n      // timer management\n      connectionTimers: new Set()\n    };\n\n    if (options.srvHost) {\n      _this.s.srvPoller = options.srvPoller || new SrvPoller({\n        heartbeatFrequencyMS: _this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        // TODO: GET THIS\n        logger: options.logger,\n        loggerLevel: options.loggerLevel\n      });\n\n      _this.s.detectTopologyDescriptionChange = function (ev) {\n        var previousType = ev.previousDescription.type;\n        var newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          _this.s.handleSrvPolling = srvPollingHandler(_assertThisInitialized(_assertThisInitialized(_this)));\n\n          _this.s.srvPoller.on('srvRecordDiscovery', _this.s.handleSrvPolling);\n\n          _this.s.srvPoller.start();\n        }\n      };\n\n      _this.on('topologyDescriptionChanged', _this.s.detectTopologyDescriptionChange);\n    } // NOTE: remove this when NODE-1709 is resolved\n\n\n    _this.setMaxListeners(Infinity);\n\n    return _this;\n  }\n  /**\n   * @return A `TopologyDescription` for this topology\n   */\n\n\n  _createClass(Topology, [{\n    key: \"connect\",\n\n    /**\n     * Initiate server connect\n     *\n     * @param {Object} [options] Optional settings\n     * @param {Array} [options.auth=null] Array of auth options to apply on connect\n     * @param {function} [callback] An optional callback called once on the first connected server\n     */\n    value: function connect(options, callback) {\n      var _this2 = this;\n\n      if (typeof options === 'function') callback = options, options = {};\n      options = options || {};\n\n      if (this.s.state === STATE_CONNECTED) {\n        if (typeof callback === 'function') {\n          callback();\n        }\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTING); // emit SDAM monitoring events\n\n      this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id)); // emit an event for the topology change\n\n      this.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(this.s.id, new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n      this.s.description)); // connect all known servers, then attempt server selection to connect\n\n      connectServers(this, Array.from(this.s.description.servers.values()));\n      translateReadPreference(options);\n      var readPreference = options.readPreference || ReadPreference.primary;\n      this.selectServer(readPreferenceServerSelector(readPreference), options, function (err) {\n        if (err) {\n          _this2.close();\n\n          if (typeof callback === 'function') {\n            callback(err);\n          } else {\n            _this2.emit('error', err);\n          }\n\n          return;\n        }\n\n        stateTransition(_this2, STATE_CONNECTED);\n\n        _this2.emit('open', err, _this2);\n\n        _this2.emit('connect', _this2);\n\n        if (typeof callback === 'function') callback(err, _this2);\n      });\n    }\n    /**\n     * Close this topology\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(options, callback) {\n      var _this3 = this;\n\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (typeof options === 'boolean') {\n        options = {\n          force: options\n        };\n      }\n\n      options = options || {};\n\n      if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n        if (typeof callback === 'function') {\n          callback();\n        }\n\n        return;\n      }\n\n      stateTransition(this, STATE_CLOSING);\n      drainWaitQueue(this[kWaitQueue], new MongoError('Topology closed'));\n      drainTimerQueue(this.s.connectionTimers);\n\n      if (this.s.srvPoller) {\n        this.s.srvPoller.stop();\n\n        if (this.s.handleSrvPolling) {\n          this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n          delete this.s.handleSrvPolling;\n        }\n      }\n\n      if (this.s.detectTopologyDescriptionChange) {\n        this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n        delete this.s.detectTopologyDescriptionChange;\n      }\n\n      this.s.sessions.forEach(function (session) {\n        return session.endSession();\n      });\n      this.s.sessionPool.endAllPooledSessions(function () {\n        eachAsync(Array.from(_this3.s.servers.values()), function (server, cb) {\n          return destroyServer(server, _this3, options, cb);\n        }, function (err) {\n          _this3.s.servers.clear(); // emit an event for close\n\n\n          _this3.emit('topologyClosed', new events.TopologyClosedEvent(_this3.s.id));\n\n          stateTransition(_this3, STATE_CLOSED);\n\n          _this3.emit('close');\n\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        });\n      });\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param {object} [options] Optional settings related to server selection\n     * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\n     * @param {function} callback The callback used to indicate success or failure\n     * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\n     */\n\n  }, {\n    key: \"selectServer\",\n    value: function selectServer(selector, options, callback) {\n      var _this4 = this;\n\n      if (typeof options === 'function') {\n        callback = options;\n\n        if (typeof selector !== 'function') {\n          options = selector;\n          var readPreference;\n\n          if (selector instanceof ReadPreference) {\n            readPreference = selector;\n          } else if (typeof selector === 'string') {\n            readPreference = new ReadPreference(selector);\n          } else {\n            translateReadPreference(options);\n            readPreference = options.readPreference || ReadPreference.primary;\n          }\n\n          selector = readPreferenceServerSelector(readPreference);\n        } else {\n          options = {};\n        }\n      }\n\n      options = Object.assign({}, {\n        serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n      }, options);\n      var isSharded = this.description.type === TopologyType.Sharded;\n      var session = options.session;\n      var transaction = session && session.transaction;\n\n      if (isSharded && transaction && transaction.server) {\n        callback(undefined, transaction.server);\n        return;\n      } // support server selection by options with readPreference\n\n\n      var serverSelector = selector;\n\n      if (typeof selector === 'object') {\n        var _readPreference = selector.readPreference ? selector.readPreference : ReadPreference.primary;\n\n        serverSelector = readPreferenceServerSelector(_readPreference);\n      }\n\n      var waitQueueMember = {\n        serverSelector: serverSelector,\n        transaction: transaction,\n        callback: callback\n      };\n      var serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n\n      if (serverSelectionTimeoutMS) {\n        waitQueueMember.timer = setTimeout(function () {\n          waitQueueMember[kCancelled] = true;\n          waitQueueMember.timer = undefined;\n          var timeoutError = new MongoServerSelectionError(\"Server selection timed out after \".concat(serverSelectionTimeoutMS, \" ms\"), _this4.description);\n          waitQueueMember.callback(timeoutError);\n        }, serverSelectionTimeoutMS);\n      }\n\n      this[kWaitQueue].push(waitQueueMember);\n      processWaitQueue(this);\n    } // Sessions related methods\n\n    /**\n     * @return Whether the topology should initiate selection to determine session support\n     */\n\n  }, {\n    key: \"shouldCheckForSessionSupport\",\n    value: function shouldCheckForSessionSupport() {\n      if (this.description.type === TopologyType.Single) {\n        return !this.description.hasKnownServers;\n      }\n\n      return !this.description.hasDataBearingServers;\n    }\n    /**\n     * @return Whether sessions are supported on the current topology\n     */\n\n  }, {\n    key: \"hasSessionSupport\",\n    value: function hasSessionSupport() {\n      return this.description.logicalSessionTimeoutMinutes != null;\n    }\n    /**\n     * Start a logical session\n     */\n\n  }, {\n    key: \"startSession\",\n    value: function startSession(options, clientOptions) {\n      var _this5 = this;\n\n      var session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n      session.once('ended', function () {\n        _this5.s.sessions.delete(session);\n      });\n      this.s.sessions.add(session);\n      return session;\n    }\n    /**\n     * Send endSessions command(s) with the given session ids\n     *\n     * @param {Array} sessions The sessions to end\n     * @param {function} [callback]\n     */\n\n  }, {\n    key: \"endSessions\",\n    value: function endSessions(sessions, callback) {\n      if (!Array.isArray(sessions)) {\n        sessions = [sessions];\n      }\n\n      this.command('admin.$cmd', {\n        endSessions: sessions\n      }, {\n        readPreference: ReadPreference.primaryPreferred,\n        noResponse: true\n      }, function () {\n        // intentionally ignored, per spec\n        if (typeof callback === 'function') callback();\n      });\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param {object} serverDescription The server to update in the internal list of server descriptions\n     */\n\n  }, {\n    key: \"serverUpdateHandler\",\n    value: function serverUpdateHandler(serverDescription) {\n      if (!this.s.description.hasServer(serverDescription.address)) {\n        return;\n      } // these will be used for monitoring events later\n\n\n      var previousTopologyDescription = this.s.description;\n      var previousServerDescription = this.s.description.servers.get(serverDescription.address); // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n      // a server it MUST compare it to the current highest seen cluster time\n      // for the deployment. If the new cluster time is higher than the\n      // highest seen cluster time it MUST become the new highest seen cluster\n      // time. Two cluster times are compared using only the BsonTimestamp\n      // value of the clusterTime embedded field.\"\n\n      var clusterTime = serverDescription.$clusterTime;\n\n      if (clusterTime) {\n        resolveClusterTime(this, clusterTime);\n      } // If we already know all the information contained in this updated description, then\n      // we don't need to emit SDAM events, but still need to update the description, in order\n      // to keep client-tracked attributes like last update time and round trip time up to date\n\n\n      var equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription); // first update the TopologyDescription\n\n      this.s.description = this.s.description.update(serverDescription);\n\n      if (this.s.description.compatibilityError) {\n        this.emit('error', new MongoError(this.s.description.compatibilityError));\n        return;\n      } // emit monitoring events for this change\n\n\n      if (!equalDescriptions) {\n        this.emit('serverDescriptionChanged', new events.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, this.s.description.servers.get(serverDescription.address)));\n      } // update server list from updated descriptions\n\n\n      updateServers(this, serverDescription); // attempt to resolve any outstanding server selection attempts\n\n      if (this[kWaitQueue].length > 0) {\n        processWaitQueue(this);\n      }\n\n      if (!equalDescriptions) {\n        this.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n      }\n    }\n  }, {\n    key: \"auth\",\n    value: function auth(credentials, callback) {\n      if (typeof credentials === 'function') callback = credentials, credentials = null;\n      if (typeof callback === 'function') callback(null, true);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout(callback) {\n      if (typeof callback === 'function') callback(null, true);\n    } // Basic operation support. Eventually this should be moved into command construction\n    // during the command refactor.\n\n    /**\n     * Insert one or more documents\n     *\n     * @param {String} ns The full qualified namespace for this operation\n     * @param {Array} ops An array of documents to insert\n     * @param {Boolean} [options.ordered=true] Execute in order or out of order\n     * @param {Object} [options.writeConcern] Write concern for the operation\n     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n     * @param {ClientSession} [options.session] Session to use for the operation\n     * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n     * @param {opResultCallback} callback A callback function\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(ns, ops, options, callback) {\n      executeWriteOperation({\n        topology: this,\n        op: 'insert',\n        ns: ns,\n        ops: ops\n      }, options, callback);\n    }\n    /**\n     * Perform one or more update operations\n     *\n     * @param {string} ns The fully qualified namespace for this operation\n     * @param {array} ops An array of updates\n     * @param {boolean} [options.ordered=true] Execute in order or out of order\n     * @param {object} [options.writeConcern] Write concern for the operation\n     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n     * @param {ClientSession} [options.session] Session to use for the operation\n     * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n     * @param {opResultCallback} callback A callback function\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(ns, ops, options, callback) {\n      executeWriteOperation({\n        topology: this,\n        op: 'update',\n        ns: ns,\n        ops: ops\n      }, options, callback);\n    }\n    /**\n     * Perform one or more remove operations\n     *\n     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n     * @param {array} ops An array of removes\n     * @param {boolean} [options.ordered=true] Execute in order or out of order\n     * @param {object} [options.writeConcern={}] Write concern for the operation\n     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n     * @param {ClientSession} [options.session=null] Session to use for the operation\n     * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n     * @param {opResultCallback} callback A callback function\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(ns, ops, options, callback) {\n      executeWriteOperation({\n        topology: this,\n        op: 'remove',\n        ns: ns,\n        ops: ops\n      }, options, callback);\n    }\n    /**\n     * Execute a command\n     *\n     * @method\n     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n     * @param {object} cmd The command hash\n     * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n     * @param {Connection} [options.connection] Specify connection object to execute command against\n     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n     * @param {ClientSession} [options.session=null] Session to use for the operation\n     * @param {opResultCallback} callback A callback function\n     */\n\n  }, {\n    key: \"command\",\n    value: function command(ns, cmd, options, callback) {\n      var _this6 = this;\n\n      if (typeof options === 'function') {\n        callback = options, options = {}, options = options || {};\n      }\n\n      translateReadPreference(options);\n      var readPreference = options.readPreference || ReadPreference.primary;\n      this.selectServer(readPreferenceServerSelector(readPreference), options, function (err, server) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        var willRetryWrite = !options.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(_this6) && !options.session.inTransaction() && isWriteCommand(cmd);\n\n        var cb = function cb(err, result) {\n          if (!err) return callback(null, result);\n\n          if (!isRetryableError(err)) {\n            return callback(err);\n          }\n\n          if (willRetryWrite) {\n            var newOptions = Object.assign({}, options, {\n              retrying: true\n            });\n            return _this6.command(ns, cmd, newOptions, callback);\n          }\n\n          return callback(err);\n        }; // increment and assign txnNumber\n\n\n        if (willRetryWrite) {\n          options.session.incrementTransactionNumber();\n          options.willRetryWrite = willRetryWrite;\n        }\n\n        server.command(ns, cmd, options, cb);\n      });\n    }\n    /**\n     * Create a new cursor\n     *\n     * @method\n     * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n     * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n     * @param {object} [options] Options for the cursor\n     * @param {object} [options.batchSize=0] Batchsize for the operation\n     * @param {array} [options.documents=[]] Initial documents list for cursor\n     * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n     * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n     * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n     * @param {ClientSession} [options.session=null] Session to use for the operation\n     * @param {object} [options.topology] The internal topology of the created cursor\n     * @returns {Cursor}\n     */\n\n  }, {\n    key: \"cursor\",\n    value: function cursor(ns, cmd, options) {\n      options = options || {};\n      var topology = options.topology || this;\n      var CursorClass = options.cursorFactory || this.s.Cursor;\n      translateReadPreference(options);\n      return new CursorClass(topology, ns, cmd, options);\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this.s.state === STATE_CONNECTED;\n    }\n  }, {\n    key: \"isDestroyed\",\n    value: function isDestroyed() {\n      return this.s.state === STATE_CLOSED;\n    }\n  }, {\n    key: \"unref\",\n    value: function unref() {\n      console.log('not implemented: `unref`');\n    } // NOTE: There are many places in code where we explicitly check the last isMaster\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first isMaster seen, which should suffice.\n\n  }, {\n    key: \"lastIsMaster\",\n    value: function lastIsMaster() {\n      var serverDescriptions = Array.from(this.description.servers.values());\n      if (serverDescriptions.length === 0) return {};\n      var sd = serverDescriptions.filter(function (sd) {\n        return sd.type !== ServerType.Unknown;\n      })[0];\n      var result = sd || {\n        maxWireVersion: this.description.commonWireVersion\n      };\n      return result;\n    }\n  }, {\n    key: \"description\",\n    get: function get() {\n      return this.s.description;\n    }\n  }, {\n    key: \"parserType\",\n    get: function get() {\n      return BSON.native ? 'c++' : 'js';\n    }\n  }, {\n    key: \"clientMetadata\",\n    get: function get() {\n      return this.s.options.metadata;\n    }\n  }, {\n    key: \"logicalSessionTimeoutMinutes\",\n    get: function get() {\n      return this.description.logicalSessionTimeoutMinutes;\n    }\n  }, {\n    key: \"bson\",\n    get: function get() {\n      return this.s.bson;\n    }\n  }]);\n\n  return Topology;\n}(EventEmitter);\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function get() {\n    return this.s.clusterTime;\n  },\n  set: function set(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}); // legacy aliases\n\nTopology.prototype.destroy = deprecate(Topology.prototype.close, 'destroy() is deprecated, please use close() instead');\nvar RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(function (op) {\n    return command[op];\n  });\n}\n/**\n * Destroys a server, and removes all event listeners from the instance\n *\n * @param {Server} server\n */\n\n\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(function (event) {\n    return server.removeAllListeners(event);\n  });\n  server.destroy(options, function () {\n    topology.emit('serverClosed', new events.ServerClosedEvent(topology.s.id, server.description.address));\n    SERVER_RELAY_EVENTS.forEach(function (event) {\n      return server.removeAllListeners(event);\n    });\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/**\n * Parses a basic seedlist in string form\n *\n * @param {string} seedlist The seedlist to parse\n */\n\n\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(function (seed) {\n    return {\n      host: seed.split(':')[0],\n      port: seed.split(':')[1] || 27017\n    };\n  });\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  var replicaSet = options.replicaSet || options.setName || options.rs_name;\n  if (seedlist.length === 1 && !replicaSet) return TopologyType.Single;\n  if (replicaSet) return TopologyType.ReplicaSetNoPrimary;\n  return TopologyType.Unknown;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit('serverOpening', new events.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  var server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n\n  if (connectDelay) {\n    var connectTimer = setTimeout(function () {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param {Topology} topology The topology responsible for the servers\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\n */\n\n\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce(function (servers, serverDescription) {\n    var server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    var server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  } // add new servers for all descriptions we currently don't know about locally\n\n\n  var _iterator = _createForOfIteratorHelper(topology.description.servers.values()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var serverDescription = _step.value;\n\n      if (!topology.s.servers.has(serverDescription.address)) {\n        var _server = createAndConnectServer(topology, serverDescription);\n\n        topology.s.servers.set(serverDescription.address, _server);\n      }\n    } // for all servers no longer known, remove their descriptions and destroy their instances\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(topology.s.servers),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var entry = _step2.value;\n      var serverAddress = entry[0];\n\n      if (topology.description.hasServer(serverAddress)) {\n        continue;\n      }\n\n      var _server2 = topology.s.servers.get(serverAddress);\n\n      topology.s.servers.delete(serverAddress); // prepare server for garbage collection\n\n      destroyServer(_server2, topology);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.\n\n  var topology = args.topology;\n  var op = args.op;\n  var ns = args.ns;\n  var ops = args.ops;\n  var willRetryWrite = !args.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(topology) && !options.session.inTransaction();\n  topology.selectServer(writableServerSelector(), options, function (err, server) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    var handler = function handler(err, result) {\n      if (!err) return callback(null, result);\n\n      if (!isRetryableError(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        var newArgs = Object.assign({}, args, {\n          retrying: true\n        });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    } // increment and assign txnNumber\n\n\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    } // execute the write operation\n\n\n    server[op](ns, ops, options, handler);\n  });\n}\n\nfunction translateReadPreference(options) {\n  if (options.readPreference == null) {\n    return;\n  }\n\n  var r = options.readPreference;\n\n  if (typeof r === 'string') {\n    options.readPreference = new ReadPreference(r);\n  } else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n    var mode = r.mode || r.preference;\n\n    if (mode && typeof mode === 'string') {\n      options.readPreference = new ReadPreference(mode, r.tags, {\n        maxStalenessSeconds: r.maxStalenessSeconds\n      });\n    }\n  } else if (!(r instanceof ReadPreference)) {\n    throw new TypeError('Invalid read preference: ' + r);\n  }\n\n  return options;\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    var previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n    topology.emit('topologyDescriptionChanged', new events.TopologyDescriptionChangedEvent(topology.s.id, previousTopologyDescription, topology.s.description));\n  };\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    var waitQueueMember = queue.shift();\n    clearTimeout(waitQueueMember.timer);\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoError('Topology is closed, please connect'));\n    return;\n  }\n\n  var serverDescriptions = Array.from(topology.description.servers.values());\n  var membersToProcess = topology[kWaitQueue].length;\n\n  for (var i = 0; i < membersToProcess && topology[kWaitQueue].length; ++i) {\n    var waitQueueMember = topology[kWaitQueue].shift();\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    var selectedDescriptions = void 0;\n\n    try {\n      var serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    var selectedServerDescription = randomSelection(selectedDescriptions);\n    var selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    var transaction = waitQueueMember.transaction;\n    var isSharded = topology.description.type === TopologyType.Sharded;\n\n    if (isSharded && transaction && transaction.isActive) {\n      transaction.pinServer(selectedServer);\n    }\n\n    clearTimeout(waitQueueMember.timer);\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    topology.s.servers.forEach(function (server) {\n      return process.nextTick(function () {\n        return server.requestCheck();\n      });\n    });\n  }\n}\n/**\n * A server opening SDAM monitoring event\n *\n * @event Topology#serverOpening\n * @type {ServerOpeningEvent}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Topology#serverClosed\n * @type {ServerClosedEvent}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Topology#serverDescriptionChanged\n * @type {ServerDescriptionChangedEvent}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Topology#topologyOpening\n * @type {TopologyOpeningEvent}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Topology#topologyClosed\n * @type {TopologyClosedEvent}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Topology#topologyDescriptionChanged\n * @type {TopologyDescriptionChangedEvent}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Topology#serverHeartbeatStarted\n * @type {ServerHeartbeatStartedEvent}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Topology#serverHeartbeatFailed\n * @type {ServerHearbeatFailedEvent}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Topology#serverHeartbeatSucceeded\n * @type {ServerHeartbeatSucceededEvent}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Topology#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Topology#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Topology#commandFailed\n * @type {object}\n */\n\n\nmodule.exports = {\n  Topology: Topology\n};","map":null,"metadata":{},"sourceType":"script"}
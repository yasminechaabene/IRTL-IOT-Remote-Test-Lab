{"ast":null,"code":"'use strict';\n\nvar ServerType = require('./common').ServerType;\n\nvar TopologyType = require('./common').TopologyType;\n\nvar ReadPreference = require('../topologies/read_preference');\n\nvar MongoError = require('../error').MongoError; // max staleness constants\n\n\nvar IDLE_WRITE_PERIOD = 10000;\nvar SMALLEST_MAX_STALENESS_SECONDS = 90;\n/**\n * Returns a server selector that selects for writable servers\n */\n\nfunction writableServerSelector() {\n  return function (topologyDescription, servers) {\n    return latencyWindowReducer(topologyDescription, servers.filter(function (s) {\n      return s.isWritable;\n    }));\n  };\n}\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param {ReadPreference} readPreference The read preference providing max staleness guidance\n * @param {topologyDescription} topologyDescription The topology description\n * @param {ServerDescription[]} servers The list of server descriptions to be reduced\n * @return {ServerDescription[]} The list of servers that satisfy the requirements of max staleness\n */\n\n\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n  if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n    return servers;\n  }\n\n  var maxStaleness = readPreference.maxStalenessSeconds;\n  var maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n\n  if (maxStaleness < maxStalenessVariance) {\n    throw new MongoError(\"maxStalenessSeconds must be at least \".concat(maxStalenessVariance, \" seconds\"));\n  }\n\n  if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n    throw new MongoError(\"maxStalenessSeconds must be at least \".concat(SMALLEST_MAX_STALENESS_SECONDS, \" seconds\"));\n  }\n\n  if (topologyDescription.type === TopologyType.ReplicaSetWithPrimary) {\n    var primary = servers.filter(primaryFilter)[0];\n    return servers.reduce(function (result, server) {\n      var stalenessMS = server.lastUpdateTime - server.lastWriteDate - (primary.lastUpdateTime - primary.lastWriteDate) + topologyDescription.heartbeatFrequencyMS;\n      var staleness = stalenessMS / 1000;\n      if (staleness <= readPreference.maxStalenessSeconds) result.push(server);\n      return result;\n    }, []);\n  } else if (topologyDescription.type === TopologyType.ReplicaSetNoPrimary) {\n    var sMax = servers.reduce(function (max, s) {\n      return s.lastWriteDate > max.lastWriteDate ? s : max;\n    });\n    return servers.reduce(function (result, server) {\n      var stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n      var staleness = stalenessMS / 1000;\n      if (staleness <= readPreference.maxStalenessSeconds) result.push(server);\n      return result;\n    }, []);\n  }\n\n  return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param {String[]} tagSet The requested tag set to match\n * @param {String[]} serverTags The server's tags\n */\n\n\nfunction tagSetMatch(tagSet, serverTags) {\n  var keys = Object.keys(tagSet);\n  var serverTagKeys = Object.keys(serverTags);\n\n  for (var i = 0; i < keys.length; ++i) {\n    var key = keys[i];\n\n    if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param {ReadPreference} readPreference The read preference providing the requested tags\n * @param {ServerDescription[]} servers The list of server descriptions to reduce\n * @return {ServerDescription[]} The list of servers matching the requested tags\n */\n\n\nfunction tagSetReducer(readPreference, servers) {\n  if (readPreference.tags == null || Array.isArray(readPreference.tags) && readPreference.tags.length === 0) {\n    return servers;\n  }\n\n  var _loop = function _loop(i) {\n    var tagSet = readPreference.tags[i];\n    var serversMatchingTagset = servers.reduce(function (matched, server) {\n      if (tagSetMatch(tagSet, server.tags)) matched.push(server);\n      return matched;\n    }, []);\n\n    if (serversMatchingTagset.length) {\n      return {\n        v: serversMatchingTagset\n      };\n    }\n  };\n\n  for (var i = 0; i < readPreference.tags.length; ++i) {\n    var _ret = _loop(i);\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n\n  return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param {topologyDescription} topologyDescription The topology description\n * @param {ServerDescription[]} servers The list of servers to reduce\n * @returns {ServerDescription[]} The servers which fall within an acceptable latency window\n */\n\n\nfunction latencyWindowReducer(topologyDescription, servers) {\n  var low = servers.reduce(function (min, server) {\n    return min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min);\n  }, -1);\n  var high = low + topologyDescription.localThresholdMS;\n  return servers.reduce(function (result, server) {\n    if (server.roundTripTime <= high && server.roundTripTime >= low) result.push(server);\n    return result;\n  }, []);\n} // filters\n\n\nfunction primaryFilter(server) {\n  return server.type === ServerType.RSPrimary;\n}\n\nfunction secondaryFilter(server) {\n  return server.type === ServerType.RSSecondary;\n}\n\nfunction nearestFilter(server) {\n  return server.type === ServerType.RSSecondary || server.type === ServerType.RSPrimary;\n}\n\nfunction knownFilter(server) {\n  return server.type !== ServerType.Unknown;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param {ReadPreference} readPreference The read preference to select with\n */\n\n\nfunction readPreferenceServerSelector(readPreference) {\n  if (!readPreference.isValid()) {\n    throw new TypeError('Invalid read preference specified');\n  }\n\n  return function (topologyDescription, servers) {\n    var commonWireVersion = topologyDescription.commonWireVersion;\n\n    if (commonWireVersion && readPreference.minWireVersion && readPreference.minWireVersion > commonWireVersion) {\n      throw new MongoError(\"Minimum wire version '\".concat(readPreference.minWireVersion, \"' required, but found '\").concat(commonWireVersion, \"'\"));\n    }\n\n    if (topologyDescription.type === TopologyType.Single || topologyDescription.type === TopologyType.Sharded) {\n      return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n    }\n\n    if (readPreference.mode === ReadPreference.PRIMARY) {\n      return servers.filter(primaryFilter);\n    }\n\n    if (readPreference.mode === ReadPreference.SECONDARY) {\n      return latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers))).filter(secondaryFilter);\n    } else if (readPreference.mode === ReadPreference.NEAREST) {\n      return latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers))).filter(nearestFilter);\n    } else if (readPreference.mode === ReadPreference.SECONDARY_PREFERRED) {\n      var result = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers))).filter(secondaryFilter);\n      return result.length === 0 ? servers.filter(primaryFilter) : result;\n    } else if (readPreference.mode === ReadPreference.PRIMARY_PREFERRED) {\n      var _result = servers.filter(primaryFilter);\n\n      if (_result.length) {\n        return _result;\n      }\n\n      return latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers))).filter(secondaryFilter);\n    }\n  };\n}\n\nmodule.exports = {\n  writableServerSelector: writableServerSelector,\n  readPreferenceServerSelector: readPreferenceServerSelector\n};","map":null,"metadata":{},"sourceType":"script"}
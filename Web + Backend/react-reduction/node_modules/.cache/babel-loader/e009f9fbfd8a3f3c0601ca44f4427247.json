{"ast":null,"code":"var buildFormattingTokensRegExp = require('../../_lib/build_formatting_tokens_reg_exp/index.js');\n\nfunction buildFormatLocale() {\n  var months3char = ['janv.', 'févr.', 'mars', 'avr.', 'mai', 'juin', 'juill.', 'août', 'sept.', 'oct.', 'nov.', 'déc.'];\n  var monthsFull = ['janvier', 'février', 'mars', 'avril', 'mai', 'juin', 'juillet', 'août', 'septembre', 'octobre', 'novembre', 'décembre'];\n  var weekdays2char = ['di', 'lu', 'ma', 'me', 'je', 've', 'sa'];\n  var weekdays3char = ['dim.', 'lun.', 'mar.', 'mer.', 'jeu.', 'ven.', 'sam.'];\n  var weekdaysFull = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];\n  var meridiemUppercase = ['AM', 'PM'];\n  var meridiemLowercase = ['am', 'pm'];\n  var meridiemFull = ['du matin', 'de l’après-midi', 'du soir'];\n  var formatters = {\n    // Month: Jan, Feb, …, Dec\n    'MMM': function MMM(date) {\n      return months3char[date.getMonth()];\n    },\n    // Month: January, February, …, December\n    'MMMM': function MMMM(date) {\n      return monthsFull[date.getMonth()];\n    },\n    // Day of week: Su, Mo, …, Sa\n    'dd': function dd(date) {\n      return weekdays2char[date.getDay()];\n    },\n    // Day of week: Sun, Mon, …, Sat\n    'ddd': function ddd(date) {\n      return weekdays3char[date.getDay()];\n    },\n    // Day of week: Sunday, Monday, …, Saturday\n    'dddd': function dddd(date) {\n      return weekdaysFull[date.getDay()];\n    },\n    // AM, PM\n    'A': function A(date) {\n      return date.getHours() / 12 >= 1 ? meridiemUppercase[1] : meridiemUppercase[0];\n    },\n    // am, pm\n    'a': function a(date) {\n      return date.getHours() / 12 >= 1 ? meridiemLowercase[1] : meridiemLowercase[0];\n    },\n    // a.m., p.m.\n    'aa': function aa(date) {\n      var hours = date.getHours();\n\n      if (hours <= 12) {\n        return meridiemFull[0];\n      }\n\n      if (hours <= 16) {\n        return meridiemFull[1];\n      }\n\n      return meridiemFull[2];\n    },\n    // ISO week, ordinal version: 1st, 2nd, …, 53rd\n    // NOTE: Week has feminine grammatical gender in French: semaine\n    'Wo': function Wo(date, formatters) {\n      return feminineOrdinal(formatters.W(date));\n    }\n  }; // Generate ordinal version of formatters: M → Mo, D → Do, etc.\n  // NOTE: For words with masculine grammatical gender in French: mois, jour, trimestre\n\n  var formatterTokens = ['M', 'D', 'DDD', 'd', 'Q'];\n  formatterTokens.forEach(function (formatterToken) {\n    formatters[formatterToken + 'o'] = function (date, formatters) {\n      return masculineOrdinal(formatters[formatterToken](date));\n    };\n  }); // Special case for day of month ordinals in long date format context:\n  // 1er mars, 2 mars, 3 mars, …\n  // See https://github.com/date-fns/date-fns/issues/437\n  //\n  // NOTE: The below implementation works because parsing of tokens inside a\n  // format string is done by a greedy regular expression, i.e. longer tokens\n  // have priority. E.g. formatter for \"Do MMMM\" has priority over individual\n  // formatters for \"Do\" and \"MMMM\".\n\n  var monthsTokens = ['MMM', 'MMMM'];\n  monthsTokens.forEach(function (monthToken) {\n    formatters['Do ' + monthToken] = function (date, commonFormatters) {\n      var dayOfMonthToken = date.getDate() === 1 ? 'Do' : 'D';\n      var dayOfMonthFormatter = formatters[dayOfMonthToken] || commonFormatters[dayOfMonthToken];\n      return dayOfMonthFormatter(date, commonFormatters) + ' ' + formatters[monthToken](date);\n    };\n  });\n  return {\n    formatters: formatters,\n    formattingTokensRegExp: buildFormattingTokensRegExp(formatters)\n  };\n}\n\nfunction masculineOrdinal(number) {\n  if (number === 1) {\n    return '1er';\n  }\n\n  return number + 'e';\n}\n\nfunction feminineOrdinal(number) {\n  if (number === 1) {\n    return '1re';\n  }\n\n  return number + 'e';\n}\n\nmodule.exports = buildFormatLocale;","map":null,"metadata":{},"sourceType":"script"}
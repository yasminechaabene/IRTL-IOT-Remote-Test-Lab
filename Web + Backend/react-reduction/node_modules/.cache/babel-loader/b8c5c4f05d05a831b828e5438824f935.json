{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar decorateCommand = require('../utils').decorateCommand;\n\nvar decorateWithReadConcern = require('../utils').decorateWithReadConcern;\n\nvar executeCommand = require('./db_ops').executeCommand;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar resolveReadPreference = require('../utils').resolveReadPreference;\n\nvar toError = require('../utils').toError;\n/**\n * Execute a geo search using a geo haystack index on a collection.\n *\n * @class\n * @property {Collection} a Collection instance.\n * @property {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n * @property {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n * @property {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\n */\n\n\nvar GeoHaystackSearchOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(GeoHaystackSearchOperation, _OperationBase);\n\n  /**\n   * Construct a GeoHaystackSearch operation.\n   *\n   * @param {Collection} a Collection instance.\n   * @param {number} x Point to search on the x axis, ensure the indexes are ordered in the same order.\n   * @param {number} y Point to search on the y axis, ensure the indexes are ordered in the same order.\n   * @param {object} [options] Optional settings. See Collection.prototype.geoHaystackSearch for a list of options.\n   */\n  function GeoHaystackSearchOperation(collection, x, y, options) {\n    var _this;\n\n    _classCallCheck(this, GeoHaystackSearchOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GeoHaystackSearchOperation).call(this, options));\n    _this.collection = collection;\n    _this.x = x;\n    _this.y = y;\n    return _this;\n  }\n  /**\n   * Execute the operation.\n   *\n   * @param {Collection~resultCallback} [callback] The command result callback\n   */\n\n\n  _createClass(GeoHaystackSearchOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var x = this.x;\n      var y = this.y;\n      var options = this.options; // Build command object\n\n      var commandObject = {\n        geoSearch: coll.collectionName,\n        near: [x, y]\n      }; // Remove read preference from hash if it exists\n\n      commandObject = decorateCommand(commandObject, options, ['readPreference', 'session']);\n      options = Object.assign({}, options); // Ensure we have the right read preference inheritance\n\n      options.readPreference = resolveReadPreference(coll, options); // Do we have a readConcern specified\n\n      decorateWithReadConcern(commandObject, coll, options); // Execute the command\n\n      executeCommand(coll.s.db, commandObject, options, function (err, res) {\n        if (err) return handleCallback(callback, err);\n        if (res.err || res.errmsg) handleCallback(callback, toError(res)); // should we only be returning res.results here? Not sure if the user\n        // should see the other return information\n\n        handleCallback(callback, null, res);\n      });\n    }\n  }]);\n\n  return GeoHaystackSearchOperation;\n}(OperationBase);\n\ndefineAspects(GeoHaystackSearchOperation, Aspect.READ_OPERATION);\nmodule.exports = GeoHaystackSearchOperation;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar applyWriteConcern = require('../utils').applyWriteConcern;\n\nvar checkCollectionName = require('../utils').checkCollectionName;\n\nvar executeDbAdminCommand = require('./db_ops').executeDbAdminCommand;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar loadCollection = require('../dynamic_loaders').loadCollection;\n\nvar toError = require('../utils').toError;\n\nvar RenameOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(RenameOperation, _OperationBase);\n\n  function RenameOperation(collection, newName, options) {\n    var _this;\n\n    _classCallCheck(this, RenameOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RenameOperation).call(this, options));\n    _this.collection = collection;\n    _this.newName = newName;\n    return _this;\n  }\n\n  _createClass(RenameOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var newName = this.newName;\n      var options = this.options;\n      var Collection = loadCollection(); // Check the collection name\n\n      checkCollectionName(newName); // Build the command\n\n      var renameCollection = coll.namespace;\n      var toCollection = coll.s.namespace.withCollection(newName).toString();\n      var dropTarget = typeof options.dropTarget === 'boolean' ? options.dropTarget : false;\n      var cmd = {\n        renameCollection: renameCollection,\n        to: toCollection,\n        dropTarget: dropTarget\n      }; // Decorate command with writeConcern if supported\n\n      applyWriteConcern(cmd, {\n        db: coll.s.db,\n        collection: coll\n      }, options); // Execute against admin\n\n      executeDbAdminCommand(coll.s.db.admin().s.db, cmd, options, function (err, doc) {\n        if (err) return handleCallback(callback, err, null); // We have an error\n\n        if (doc.errmsg) return handleCallback(callback, toError(doc), null);\n\n        try {\n          return handleCallback(callback, null, new Collection(coll.s.db, coll.s.topology, coll.s.namespace.db, newName, coll.s.pkFactory, coll.s.options));\n        } catch (err) {\n          return handleCallback(callback, toError(err), null);\n        }\n      });\n    }\n  }]);\n\n  return RenameOperation;\n}(OperationBase);\n\nmodule.exports = RenameOperation;","map":null,"metadata":{},"sourceType":"script"}
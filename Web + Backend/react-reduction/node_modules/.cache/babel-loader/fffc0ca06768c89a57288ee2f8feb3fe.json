{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar CommandOperationV2 = require('./command_v2');\n\nvar Aspect = require('./operation').Aspect;\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar maxWireVersion = require('../core/utils').maxWireVersion;\n\nvar CONSTANTS = require('../constants');\n\nvar LIST_COLLECTIONS_WIRE_VERSION = 3;\n\nfunction listCollectionsTransforms(databaseName) {\n  var matching = \"\".concat(databaseName, \".\");\n  return {\n    doc: function doc(_doc) {\n      var index = _doc.name.indexOf(matching); // Remove database name if available\n\n\n      if (_doc.name && index === 0) {\n        _doc.name = _doc.name.substr(index + matching.length);\n      }\n\n      return _doc;\n    }\n  };\n}\n\nvar ListCollectionsOperation = /*#__PURE__*/function (_CommandOperationV) {\n  _inherits(ListCollectionsOperation, _CommandOperationV);\n\n  function ListCollectionsOperation(db, filter, options) {\n    var _this;\n\n    _classCallCheck(this, ListCollectionsOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ListCollectionsOperation).call(this, db, options, {\n      fullResponse: true\n    }));\n    _this.db = db;\n    _this.filter = filter;\n    _this.nameOnly = !!_this.options.nameOnly;\n\n    if (typeof _this.options.batchSize === 'number') {\n      _this.batchSize = _this.options.batchSize;\n    }\n\n    return _this;\n  }\n\n  _createClass(ListCollectionsOperation, [{\n    key: \"execute\",\n    value: function execute(server, callback) {\n      if (maxWireVersion(server) < LIST_COLLECTIONS_WIRE_VERSION) {\n        var filter = this.filter;\n        var databaseName = this.db.s.namespace.db; // If we have legacy mode and have not provided a full db name filter it\n\n        if (typeof filter.name === 'string' && !new RegExp('^' + databaseName + '\\\\.').test(filter.name)) {\n          filter = Object.assign({}, filter);\n          filter.name = this.db.s.namespace.withCollection(filter.name).toString();\n        } // No filter, filter by current database\n\n\n        if (filter == null) {\n          filter.name = \"/\".concat(databaseName, \"/\");\n        } // Rewrite the filter to use $and to filter out indexes\n\n\n        if (filter.name) {\n          filter = {\n            $and: [{\n              name: filter.name\n            }, {\n              name: /^((?!\\$).)*$/\n            }]\n          };\n        } else {\n          filter = {\n            name: /^((?!\\$).)*$/\n          };\n        }\n\n        var transforms = listCollectionsTransforms(databaseName);\n        server.query(\"\".concat(databaseName, \".\").concat(CONSTANTS.SYSTEM_NAMESPACE_COLLECTION), {\n          query: filter\n        }, {\n          batchSize: this.batchSize || 1000\n        }, {}, function (err, result) {\n          if (result && result.message && result.message.documents && Array.isArray(result.message.documents)) {\n            result.message.documents = result.message.documents.map(transforms.doc);\n          }\n\n          callback(err, result);\n        });\n        return;\n      }\n\n      var command = {\n        listCollections: 1,\n        filter: this.filter,\n        cursor: this.batchSize ? {\n          batchSize: this.batchSize\n        } : {},\n        nameOnly: this.nameOnly\n      };\n      return _get(_getPrototypeOf(ListCollectionsOperation.prototype), \"executeCommand\", this).call(this, server, command, callback);\n    }\n  }]);\n\n  return ListCollectionsOperation;\n}(CommandOperationV2);\n\ndefineAspects(ListCollectionsOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXECUTE_WITH_SELECTION]);\nmodule.exports = ListCollectionsOperation;","map":null,"metadata":{},"sourceType":"script"}
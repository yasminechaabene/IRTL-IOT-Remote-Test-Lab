{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar applyRetryableWrites = require('../utils').applyRetryableWrites;\n\nvar applyWriteConcern = require('../utils').applyWriteConcern;\n\nvar decorateWithCollation = require('../utils').decorateWithCollation;\n\nvar executeCommand = require('./db_ops').executeCommand;\n\nvar formattedOrderClause = require('../utils').formattedOrderClause;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar ReadPreference = require('../core').ReadPreference;\n\nvar FindAndModifyOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(FindAndModifyOperation, _OperationBase);\n\n  function FindAndModifyOperation(collection, query, sort, doc, options) {\n    var _this;\n\n    _classCallCheck(this, FindAndModifyOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FindAndModifyOperation).call(this, options));\n    _this.collection = collection;\n    _this.query = query;\n    _this.sort = sort;\n    _this.doc = doc;\n    return _this;\n  }\n\n  _createClass(FindAndModifyOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var query = this.query;\n      var sort = formattedOrderClause(this.sort);\n      var doc = this.doc;\n      var options = this.options; // Create findAndModify command object\n\n      var queryObject = {\n        findAndModify: coll.collectionName,\n        query: query\n      };\n\n      if (sort) {\n        queryObject.sort = sort;\n      }\n\n      queryObject.new = options.new ? true : false;\n      queryObject.remove = options.remove ? true : false;\n      queryObject.upsert = options.upsert ? true : false;\n      var projection = options.projection || options.fields;\n\n      if (projection) {\n        queryObject.fields = projection;\n      }\n\n      if (options.arrayFilters) {\n        queryObject.arrayFilters = options.arrayFilters;\n      }\n\n      if (doc && !options.remove) {\n        queryObject.update = doc;\n      }\n\n      if (options.maxTimeMS) queryObject.maxTimeMS = options.maxTimeMS; // Either use override on the function, or go back to default on either the collection\n      // level or db\n\n      options.serializeFunctions = options.serializeFunctions || coll.s.serializeFunctions; // No check on the documents\n\n      options.checkKeys = false; // Final options for retryable writes and write concern\n\n      options = applyRetryableWrites(options, coll.s.db);\n      options = applyWriteConcern(options, {\n        db: coll.s.db,\n        collection: coll\n      }, options); // Decorate the findAndModify command with the write Concern\n\n      if (options.writeConcern) {\n        queryObject.writeConcern = options.writeConcern;\n      } // Have we specified bypassDocumentValidation\n\n\n      if (options.bypassDocumentValidation === true) {\n        queryObject.bypassDocumentValidation = options.bypassDocumentValidation;\n      }\n\n      options.readPreference = ReadPreference.primary; // Have we specified collation\n\n      try {\n        decorateWithCollation(queryObject, coll, options);\n      } catch (err) {\n        return callback(err, null);\n      } // Execute the command\n\n\n      executeCommand(coll.s.db, queryObject, options, function (err, result) {\n        if (err) return handleCallback(callback, err, null);\n        return handleCallback(callback, null, result);\n      });\n    }\n  }]);\n\n  return FindAndModifyOperation;\n}(OperationBase);\n\nmodule.exports = FindAndModifyOperation;","map":null,"metadata":{},"sourceType":"script"}
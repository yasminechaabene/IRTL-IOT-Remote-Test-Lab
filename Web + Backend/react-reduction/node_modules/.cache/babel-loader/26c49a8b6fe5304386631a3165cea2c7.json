{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar collection;\n\nfunction loadCollection() {\n  if (!collection) {\n    collection = require('../collection');\n  }\n\n  return collection;\n}\n\nvar CollectionsOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(CollectionsOperation, _OperationBase);\n\n  function CollectionsOperation(db, options) {\n    var _this;\n\n    _classCallCheck(this, CollectionsOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CollectionsOperation).call(this, options));\n    _this.db = db;\n    return _this;\n  }\n\n  _createClass(CollectionsOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var db = this.db;\n      var options = this.options;\n      var Collection = loadCollection();\n      options = Object.assign({}, options, {\n        nameOnly: true\n      }); // Let's get the collection names\n\n      db.listCollections({}, options).toArray(function (err, documents) {\n        if (err != null) return handleCallback(callback, err, null); // Filter collections removing any illegal ones\n\n        documents = documents.filter(function (doc) {\n          return doc.name.indexOf('$') === -1;\n        }); // Return the collection objects\n\n        handleCallback(callback, null, documents.map(function (d) {\n          return new Collection(db, db.s.topology, db.databaseName, d.name, db.s.pkFactory, db.s.options);\n        }));\n      });\n    }\n  }]);\n\n  return CollectionsOperation;\n}(OperationBase);\n\nmodule.exports = CollectionsOperation;","map":null,"metadata":{},"sourceType":"script"}
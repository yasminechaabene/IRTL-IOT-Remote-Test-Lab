{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar crypto = require('crypto');\n\nvar AuthProvider = require('./auth_provider').AuthProvider;\n/**\n * Creates a new MongoCR authentication mechanism\n *\n * @extends AuthProvider\n */\n\n\nvar MongoCR = /*#__PURE__*/function (_AuthProvider) {\n  _inherits(MongoCR, _AuthProvider);\n\n  function MongoCR() {\n    _classCallCheck(this, MongoCR);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MongoCR).apply(this, arguments));\n  }\n\n  _createClass(MongoCR, [{\n    key: \"_authenticateSingleConnection\",\n\n    /**\n     * Implementation of authentication for a single connection\n     * @override\n     */\n    value: function _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n      var username = credentials.username;\n      var password = credentials.password;\n      var source = credentials.source;\n      sendAuthCommand(connection, \"\".concat(source, \".$cmd\"), {\n        getnonce: 1\n      }, function (err, r) {\n        var nonce = null;\n        var key = null; // Get nonce\n\n        if (err == null) {\n          nonce = r.nonce; // Use node md5 generator\n\n          var md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n          md5.update(username + ':mongo:' + password, 'utf8');\n          var hash_password = md5.digest('hex'); // Final key\n\n          md5 = crypto.createHash('md5');\n          md5.update(nonce + username + hash_password, 'utf8');\n          key = md5.digest('hex');\n        }\n\n        var authenticateCommand = {\n          authenticate: 1,\n          user: username,\n          nonce: nonce,\n          key: key\n        };\n        sendAuthCommand(connection, \"\".concat(source, \".$cmd\"), authenticateCommand, callback);\n      });\n    }\n  }]);\n\n  return MongoCR;\n}(AuthProvider);\n\nmodule.exports = MongoCR;","map":null,"metadata":{},"sourceType":"script"}
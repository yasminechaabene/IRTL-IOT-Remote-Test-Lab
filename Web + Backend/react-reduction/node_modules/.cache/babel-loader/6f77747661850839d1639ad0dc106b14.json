{"ast":null,"code":"'use strict';\n\nvar URL = require('url');\n\nvar qs = require('querystring');\n\nvar dns = require('dns');\n\nvar MongoParseError = require('./error').MongoParseError;\n\nvar ReadPreference = require('./topologies/read_preference');\n/**\n * The following regular expression validates a connection string and breaks the\n * provide string into the following capture groups: [protocol, username, password, hosts]\n */\n\n\nvar HOSTS_RX = /(mongodb(?:\\+srv|)):\\/\\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\\/|)(.*)/;\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\n\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  var regex = /^.*?\\./;\n  var srv = \".\".concat(srvAddress.replace(regex, ''));\n  var parent = \".\".concat(parentDomain.replace(regex, ''));\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param {string} uri The connection string to parse\n * @param {object} options Optional user provided connection string options\n * @param {function} callback\n */\n\n\nfunction parseSrvConnectionString(uri, options, callback) {\n  var result = URL.parse(uri, true);\n\n  if (result.hostname.split('.').length < 3) {\n    return callback(new MongoParseError('URI does not have hostname, domain name and tld'));\n  }\n\n  result.domainLength = result.hostname.split('.').length;\n\n  if (result.pathname && result.pathname.match(',')) {\n    return callback(new MongoParseError('Invalid URI, cannot contain multiple hostnames'));\n  }\n\n  if (result.port) {\n    return callback(new MongoParseError(\"Ports not accepted with '\".concat(PROTOCOL_MONGODB_SRV, \"' URIs\")));\n  } // Resolve the SRV record and use the result as the list of hosts to connect to.\n\n\n  var lookupAddress = result.host;\n  dns.resolveSrv(\"_mongodb._tcp.\".concat(lookupAddress), function (err, addresses) {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoParseError('No addresses found at host'));\n    }\n\n    for (var i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(new MongoParseError('Server record does not share hostname with parent URI'));\n      }\n    } // Convert the original URL to a non-SRV URL.\n\n\n    result.protocol = 'mongodb';\n    result.host = addresses.map(function (address) {\n      return \"\".concat(address.name, \":\").concat(address.port);\n    }).join(','); // Default to SSL true if it's not specified.\n\n    if (!('ssl' in options) && (!result.search || !('ssl' in result.query) || result.query.ssl === null)) {\n      result.query.ssl = true;\n    } // Resolve TXT record and add options from there if they exist.\n\n\n    dns.resolveTxt(lookupAddress, function (err, record) {\n      if (err) {\n        if (err.code !== 'ENODATA') {\n          return callback(err);\n        }\n\n        record = null;\n      }\n\n      if (record) {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        record = qs.parse(record[0].join(''));\n\n        if (Object.keys(record).some(function (key) {\n          return key !== 'authSource' && key !== 'replicaSet';\n        })) {\n          return callback(new MongoParseError('Text record must only set `authSource` or `replicaSet`'));\n        }\n\n        result.query = Object.assign({}, record, result.query);\n      } // Set completed options back into the URL object.\n\n\n      result.search = qs.stringify(result.query);\n      var finalString = URL.format(result);\n      parseConnectionString(finalString, options, function (err, ret) {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        callback(null, Object.assign({}, ret, {\n          srvHost: lookupAddress\n        }));\n      });\n    });\n  });\n}\n/**\n * Parses a query string item according to the connection string spec\n *\n * @param {string} key The key for the parsed value\n * @param {Array|String} value The value to parse\n * @return {Array|Object|String} The parsed value\n */\n\n\nfunction parseQueryStringItemValue(key, value) {\n  if (Array.isArray(value)) {\n    // deduplicate and simplify arrays\n    value = value.filter(function (v, idx) {\n      return value.indexOf(v) === idx;\n    });\n    if (value.length === 1) value = value[0];\n  } else if (value.indexOf(':') > 0) {\n    value = value.split(',').reduce(function (result, pair) {\n      var parts = pair.split(':');\n      result[parts[0]] = parseQueryStringItemValue(key, parts[1]);\n      return result;\n    }, {});\n  } else if (value.indexOf(',') > 0) {\n    value = value.split(',').map(function (v) {\n      return parseQueryStringItemValue(key, v);\n    });\n  } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {\n    value = value.toLowerCase() === 'true';\n  } else if (!Number.isNaN(value) && !STRING_OPTIONS.has(key)) {\n    var numericValue = parseFloat(value);\n\n    if (!Number.isNaN(numericValue)) {\n      value = parseFloat(value);\n    }\n  }\n\n  return value;\n} // Options that are known boolean types\n\n\nvar BOOLEAN_OPTIONS = new Set(['slaveok', 'slave_ok', 'sslvalidate', 'fsync', 'safe', 'retrywrites', 'j']); // Known string options, only used to bypass Number coercion in `parseQueryStringItemValue`\n\nvar STRING_OPTIONS = new Set(['authsource', 'replicaset']); // Supported text representations of auth mechanisms\n// NOTE: this list exists in native already, if it is merged here we should deduplicate\n\nvar AUTH_MECHANISMS = new Set(['GSSAPI', 'MONGODB-X509', 'MONGODB-CR', 'DEFAULT', 'SCRAM-SHA-1', 'SCRAM-SHA-256', 'PLAIN']); // Lookup table used to translate normalized (lower-cased) forms of connection string\n// options to their expected camelCase version\n\nvar CASE_TRANSLATION = {\n  replicaset: 'replicaSet',\n  connecttimeoutms: 'connectTimeoutMS',\n  sockettimeoutms: 'socketTimeoutMS',\n  maxpoolsize: 'maxPoolSize',\n  minpoolsize: 'minPoolSize',\n  maxidletimems: 'maxIdleTimeMS',\n  waitqueuemultiple: 'waitQueueMultiple',\n  waitqueuetimeoutms: 'waitQueueTimeoutMS',\n  wtimeoutms: 'wtimeoutMS',\n  readconcern: 'readConcern',\n  readconcernlevel: 'readConcernLevel',\n  readpreference: 'readPreference',\n  maxstalenessseconds: 'maxStalenessSeconds',\n  readpreferencetags: 'readPreferenceTags',\n  authsource: 'authSource',\n  authmechanism: 'authMechanism',\n  authmechanismproperties: 'authMechanismProperties',\n  gssapiservicename: 'gssapiServiceName',\n  localthresholdms: 'localThresholdMS',\n  serverselectiontimeoutms: 'serverSelectionTimeoutMS',\n  serverselectiontryonce: 'serverSelectionTryOnce',\n  heartbeatfrequencyms: 'heartbeatFrequencyMS',\n  retrywrites: 'retryWrites',\n  uuidrepresentation: 'uuidRepresentation',\n  zlibcompressionlevel: 'zlibCompressionLevel',\n  tlsallowinvalidcertificates: 'tlsAllowInvalidCertificates',\n  tlsallowinvalidhostnames: 'tlsAllowInvalidHostnames',\n  tlsinsecure: 'tlsInsecure',\n  tlscafile: 'tlsCAFile',\n  tlscertificatekeyfile: 'tlsCertificateKeyFile',\n  tlscertificatekeyfilepassword: 'tlsCertificateKeyFilePassword',\n  wtimeout: 'wTimeoutMS',\n  j: 'journal'\n};\n/**\n * Sets the value for `key`, allowing for any required translation\n *\n * @param {object} obj The object to set the key on\n * @param {string} key The key to set the value for\n * @param {*} value The value to set\n * @param {object} options The options used for option parsing\n */\n\nfunction applyConnectionStringOption(obj, key, value, options) {\n  // simple key translation\n  if (key === 'journal') {\n    key = 'j';\n  } else if (key === 'wtimeoutms') {\n    key = 'wtimeout';\n  } // more complicated translation\n\n\n  if (BOOLEAN_OPTIONS.has(key)) {\n    value = value === 'true' || value === true;\n  } else if (key === 'appname') {\n    value = decodeURIComponent(value);\n  } else if (key === 'readconcernlevel') {\n    obj['readConcernLevel'] = value;\n    key = 'readconcern';\n    value = {\n      level: value\n    };\n  } // simple validation\n\n\n  if (key === 'compressors') {\n    value = Array.isArray(value) ? value : [value];\n\n    if (!value.every(function (c) {\n      return c === 'snappy' || c === 'zlib';\n    })) {\n      throw new MongoParseError('Value for `compressors` must be at least one of: `snappy`, `zlib`');\n    }\n  }\n\n  if (key === 'authmechanism' && !AUTH_MECHANISMS.has(value)) {\n    throw new MongoParseError('Value for `authMechanism` must be one of: `DEFAULT`, `GSSAPI`, `PLAIN`, `MONGODB-X509`, `SCRAM-SHA-1`, `SCRAM-SHA-256`');\n  }\n\n  if (key === 'readpreference' && !ReadPreference.isValid(value)) {\n    throw new MongoParseError('Value for `readPreference` must be one of: `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred`, `nearest`');\n  }\n\n  if (key === 'zlibcompressionlevel' && (value < -1 || value > 9)) {\n    throw new MongoParseError('zlibCompressionLevel must be an integer between -1 and 9');\n  } // special cases\n\n\n  if (key === 'compressors' || key === 'zlibcompressionlevel') {\n    obj.compression = obj.compression || {};\n    obj = obj.compression;\n  }\n\n  if (key === 'authmechanismproperties') {\n    if (typeof value.SERVICE_NAME === 'string') obj.gssapiServiceName = value.SERVICE_NAME;\n    if (typeof value.SERVICE_REALM === 'string') obj.gssapiServiceRealm = value.SERVICE_REALM;\n\n    if (typeof value.CANONICALIZE_HOST_NAME !== 'undefined') {\n      obj.gssapiCanonicalizeHostName = value.CANONICALIZE_HOST_NAME;\n    }\n  }\n\n  if (key === 'readpreferencetags' && Array.isArray(value)) {\n    value = splitArrayOfMultipleReadPreferenceTags(value);\n  } // set the actual value\n\n\n  if (options.caseTranslate && CASE_TRANSLATION[key]) {\n    obj[CASE_TRANSLATION[key]] = value;\n    return;\n  }\n\n  obj[key] = value;\n}\n\nvar USERNAME_REQUIRED_MECHANISMS = new Set(['GSSAPI', 'MONGODB-CR', 'PLAIN', 'SCRAM-SHA-1', 'SCRAM-SHA-256']);\n\nfunction splitArrayOfMultipleReadPreferenceTags(value) {\n  var parsedTags = [];\n\n  var _loop = function _loop(i) {\n    parsedTags[i] = {};\n    value[i].split(',').forEach(function (individualTag) {\n      var splitTag = individualTag.split(':');\n      parsedTags[i][splitTag[0]] = splitTag[1];\n    });\n  };\n\n  for (var i = 0; i < value.length; i++) {\n    _loop(i);\n  }\n\n  return parsedTags;\n}\n/**\n * Modifies the parsed connection string object taking into account expectations we\n * have for authentication-related options.\n *\n * @param {object} parsed The parsed connection string result\n * @return The parsed connection string result possibly modified for auth expectations\n */\n\n\nfunction applyAuthExpectations(parsed) {\n  if (parsed.options == null) {\n    return;\n  }\n\n  var options = parsed.options;\n  var authSource = options.authsource || options.authSource;\n\n  if (authSource != null) {\n    parsed.auth = Object.assign({}, parsed.auth, {\n      db: authSource\n    });\n  }\n\n  var authMechanism = options.authmechanism || options.authMechanism;\n\n  if (authMechanism != null) {\n    if (USERNAME_REQUIRED_MECHANISMS.has(authMechanism) && (!parsed.auth || parsed.auth.username == null)) {\n      throw new MongoParseError(\"Username required for mechanism `\".concat(authMechanism, \"`\"));\n    }\n\n    if (authMechanism === 'GSSAPI') {\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(\"Invalid source `\".concat(authSource, \"` for mechanism `\").concat(authMechanism, \"` specified.\"));\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, {\n        db: '$external'\n      });\n    }\n\n    if (authMechanism === 'MONGODB-X509') {\n      if (parsed.auth && parsed.auth.password != null) {\n        throw new MongoParseError(\"Password not allowed for mechanism `\".concat(authMechanism, \"`\"));\n      }\n\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(\"Invalid source `\".concat(authSource, \"` for mechanism `\").concat(authMechanism, \"` specified.\"));\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, {\n        db: '$external'\n      });\n    }\n\n    if (authMechanism === 'PLAIN') {\n      if (parsed.auth && parsed.auth.db == null) {\n        parsed.auth = Object.assign({}, parsed.auth, {\n          db: '$external'\n        });\n      }\n    }\n  } // default to `admin` if nothing else was resolved\n\n\n  if (parsed.auth && parsed.auth.db == null) {\n    parsed.auth = Object.assign({}, parsed.auth, {\n      db: 'admin'\n    });\n  }\n\n  return parsed;\n}\n/**\n * Parses a query string according the connection string spec.\n *\n * @param {String} query The query string to parse\n * @param {object} [options] The options used for options parsing\n * @return {Object|Error} The parsed query string as an object, or an error if one was encountered\n */\n\n\nfunction parseQueryString(query, options) {\n  var result = {};\n  var parsedQueryString = qs.parse(query);\n  checkTLSOptions(parsedQueryString);\n\n  for (var key in parsedQueryString) {\n    var value = parsedQueryString[key];\n\n    if (value === '' || value == null) {\n      throw new MongoParseError('Incomplete key value pair for option');\n    }\n\n    var normalizedKey = key.toLowerCase();\n    var parsedValue = parseQueryStringItemValue(normalizedKey, value);\n    applyConnectionStringOption(result, normalizedKey, parsedValue, options);\n  } // special cases for known deprecated options\n\n\n  if (result.wtimeout && result.wtimeoutms) {\n    delete result.wtimeout;\n    console.warn('Unsupported option `wtimeout` specified');\n  }\n\n  return Object.keys(result).length ? result : null;\n} /// Adds support for modern `tls` variants of out `ssl` options\n\n\nfunction translateTLSOptions(queryString) {\n  if (queryString.tls) {\n    queryString.ssl = queryString.tls;\n  }\n\n  if (queryString.tlsInsecure) {\n    queryString.checkServerIdentity = false;\n    queryString.sslValidate = false;\n  } else {\n    Object.assign(queryString, {\n      checkServerIdentity: queryString.tlsAllowInvalidHostnames ? false : true,\n      sslValidate: queryString.tlsAllowInvalidCertificates ? false : true\n    });\n  }\n\n  if (queryString.tlsCAFile) {\n    queryString.ssl = true;\n    queryString.sslCA = queryString.tlsCAFile;\n  }\n\n  if (queryString.tlsCertificateKeyFile) {\n    queryString.ssl = true;\n\n    if (queryString.tlsCertificateFile) {\n      queryString.sslCert = queryString.tlsCertificateFile;\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\n    } else {\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\n      queryString.sslCert = queryString.tlsCertificateKeyFile;\n    }\n  }\n\n  if (queryString.tlsCertificateKeyFilePassword) {\n    queryString.ssl = true;\n    queryString.sslPass = queryString.tlsCertificateKeyFilePassword;\n  }\n\n  return queryString;\n}\n/**\n * Checks a query string for invalid tls options according to the URI options spec.\n *\n * @param {string} queryString The query string to check\n * @throws {MongoParseError}\n */\n\n\nfunction checkTLSOptions(queryString) {\n  var queryStringKeys = Object.keys(queryString);\n\n  if (queryStringKeys.indexOf('tlsInsecure') !== -1 && (queryStringKeys.indexOf('tlsAllowInvalidCertificates') !== -1 || queryStringKeys.indexOf('tlsAllowInvalidHostnames') !== -1)) {\n    throw new MongoParseError('The `tlsInsecure` option cannot be used with `tlsAllowInvalidCertificates` or `tlsAllowInvalidHostnames`.');\n  }\n\n  var tlsValue = assertTlsOptionsAreEqual('tls', queryString, queryStringKeys);\n  var sslValue = assertTlsOptionsAreEqual('ssl', queryString, queryStringKeys);\n\n  if (tlsValue != null && sslValue != null) {\n    if (tlsValue !== sslValue) {\n      throw new MongoParseError('All values of `tls` and `ssl` must be the same.');\n    }\n  }\n}\n/**\n * Checks a query string to ensure all tls/ssl options are the same.\n *\n * @param {string} key The key (tls or ssl) to check\n * @param {string} queryString The query string to check\n * @throws {MongoParseError}\n * @return The value of the tls/ssl option\n */\n\n\nfunction assertTlsOptionsAreEqual(optionName, queryString, queryStringKeys) {\n  var queryStringHasTLSOption = queryStringKeys.indexOf(optionName) !== -1;\n  var optionValue;\n\n  if (Array.isArray(queryString[optionName])) {\n    optionValue = queryString[optionName][0];\n  } else {\n    optionValue = queryString[optionName];\n  }\n\n  if (queryStringHasTLSOption) {\n    if (Array.isArray(queryString[optionName])) {\n      var firstValue = queryString[optionName][0];\n      queryString[optionName].forEach(function (tlsValue) {\n        if (tlsValue !== firstValue) {\n          throw new MongoParseError(\"All values of \".concat(optionName, \" must be the same.\"));\n        }\n      });\n    }\n  }\n\n  return optionValue;\n}\n\nvar PROTOCOL_MONGODB = 'mongodb';\nvar PROTOCOL_MONGODB_SRV = 'mongodb+srv';\nvar SUPPORTED_PROTOCOLS = [PROTOCOL_MONGODB, PROTOCOL_MONGODB_SRV];\n/**\n * Parses a MongoDB connection string\n *\n * @param {*} uri the MongoDB connection string to parse\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.caseTranslate] Whether the parser should translate options back into camelCase after normalization\n * @param {parseCallback} callback\n */\n\nfunction parseConnectionString(uri, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = Object.assign({}, {\n    caseTranslate: true\n  }, options); // Check for bad uris before we parse\n\n  try {\n    URL.parse(uri);\n  } catch (e) {\n    return callback(new MongoParseError('URI malformed, cannot be parsed'));\n  }\n\n  var cap = uri.match(HOSTS_RX);\n\n  if (!cap) {\n    return callback(new MongoParseError('Invalid connection string'));\n  }\n\n  var protocol = cap[1];\n\n  if (SUPPORTED_PROTOCOLS.indexOf(protocol) === -1) {\n    return callback(new MongoParseError('Invalid protocol provided'));\n  }\n\n  if (protocol === PROTOCOL_MONGODB_SRV) {\n    return parseSrvConnectionString(uri, options, callback);\n  }\n\n  var dbAndQuery = cap[4].split('?');\n  var db = dbAndQuery.length > 0 ? dbAndQuery[0] : null;\n  var query = dbAndQuery.length > 1 ? dbAndQuery[1] : null;\n  var parsedOptions;\n\n  try {\n    parsedOptions = parseQueryString(query, options);\n  } catch (parseError) {\n    return callback(parseError);\n  }\n\n  parsedOptions = Object.assign({}, parsedOptions, options);\n  var auth = {\n    username: null,\n    password: null,\n    db: db && db !== '' ? qs.unescape(db) : null\n  };\n\n  if (parsedOptions.auth) {\n    // maintain support for legacy options passed into `MongoClient`\n    if (parsedOptions.auth.username) auth.username = parsedOptions.auth.username;\n    if (parsedOptions.auth.user) auth.username = parsedOptions.auth.user;\n    if (parsedOptions.auth.password) auth.password = parsedOptions.auth.password;\n  } else {\n    if (parsedOptions.username) auth.username = parsedOptions.username;\n    if (parsedOptions.user) auth.username = parsedOptions.user;\n    if (parsedOptions.password) auth.password = parsedOptions.password;\n  }\n\n  if (cap[4].split('?')[0].indexOf('@') !== -1) {\n    return callback(new MongoParseError('Unescaped slash in userinfo section'));\n  }\n\n  var authorityParts = cap[3].split('@');\n\n  if (authorityParts.length > 2) {\n    return callback(new MongoParseError('Unescaped at-sign in authority section'));\n  }\n\n  if (authorityParts[0] == null || authorityParts[0] === '') {\n    return callback(new MongoParseError('No username provided in authority section'));\n  }\n\n  if (authorityParts.length > 1) {\n    var authParts = authorityParts.shift().split(':');\n\n    if (authParts.length > 2) {\n      return callback(new MongoParseError('Unescaped colon in authority section'));\n    }\n\n    if (authParts[0] === '') {\n      return callback(new MongoParseError('Invalid empty username provided'));\n    }\n\n    if (!auth.username) auth.username = qs.unescape(authParts[0]);\n    if (!auth.password) auth.password = authParts[1] ? qs.unescape(authParts[1]) : null;\n  }\n\n  var hostParsingError = null;\n  var hosts = authorityParts.shift().split(',').map(function (host) {\n    var parsedHost = URL.parse(\"mongodb://\".concat(host));\n\n    if (parsedHost.path === '/:') {\n      hostParsingError = new MongoParseError('Double colon in host identifier');\n      return null;\n    } // heuristically determine if we're working with a domain socket\n\n\n    if (host.match(/\\.sock/)) {\n      parsedHost.hostname = qs.unescape(host);\n      parsedHost.port = null;\n    }\n\n    if (Number.isNaN(parsedHost.port)) {\n      hostParsingError = new MongoParseError('Invalid port (non-numeric string)');\n      return;\n    }\n\n    var result = {\n      host: parsedHost.hostname,\n      port: parsedHost.port ? parseInt(parsedHost.port) : 27017\n    };\n\n    if (result.port === 0) {\n      hostParsingError = new MongoParseError('Invalid port (zero) with hostname');\n      return;\n    }\n\n    if (result.port > 65535) {\n      hostParsingError = new MongoParseError('Invalid port (larger than 65535) with hostname');\n      return;\n    }\n\n    if (result.port < 0) {\n      hostParsingError = new MongoParseError('Invalid port (negative number)');\n      return;\n    }\n\n    return result;\n  }).filter(function (host) {\n    return !!host;\n  });\n\n  if (hostParsingError) {\n    return callback(hostParsingError);\n  }\n\n  if (hosts.length === 0 || hosts[0].host === '' || hosts[0].host === null) {\n    return callback(new MongoParseError('No hostname or hostnames provided in connection string'));\n  }\n\n  var result = {\n    hosts: hosts,\n    auth: auth.db || auth.username ? auth : null,\n    options: Object.keys(parsedOptions).length ? parsedOptions : null\n  };\n\n  if (result.auth && result.auth.db) {\n    result.defaultDatabase = result.auth.db;\n  } else {\n    result.defaultDatabase = 'test';\n  } // support modern `tls` variants to SSL options\n\n\n  result.options = translateTLSOptions(result.options);\n\n  try {\n    applyAuthExpectations(result);\n  } catch (authError) {\n    return callback(authError);\n  }\n\n  callback(null, result);\n}\n\nmodule.exports = parseConnectionString;","map":null,"metadata":{},"sourceType":"script"}
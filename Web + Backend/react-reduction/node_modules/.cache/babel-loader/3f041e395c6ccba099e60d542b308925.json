{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar applyWriteConcern = require('../utils').applyWriteConcern;\n\nvar debugOptions = require('../utils').debugOptions;\n\nvar handleCallback = require('../utils').handleCallback;\n\nvar MongoError = require('../core').MongoError;\n\nvar ReadPreference = require('../core').ReadPreference;\n\nvar resolveReadPreference = require('../utils').resolveReadPreference;\n\nvar MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nvar debugFields = ['authSource', 'w', 'wtimeout', 'j', 'native_parser', 'forceServerObjectId', 'serializeFunctions', 'raw', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bufferMaxEntries', 'numberOfRetries', 'retryMiliSeconds', 'readPreference', 'pkFactory', 'parentDb', 'promiseLibrary', 'noListener'];\n\nvar CommandOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(CommandOperation, _OperationBase);\n\n  function CommandOperation(db, options, collection, command) {\n    var _this;\n\n    _classCallCheck(this, CommandOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommandOperation).call(this, options));\n\n    if (!_this.hasAspect(Aspect.WRITE_OPERATION)) {\n      if (collection != null) {\n        _this.options.readPreference = resolveReadPreference(collection, options);\n      } else {\n        _this.options.readPreference = resolveReadPreference(db, options);\n      }\n    } else {\n      if (collection != null) {\n        applyWriteConcern(_this.options, {\n          db: db,\n          coll: collection\n        }, _this.options);\n      } else {\n        applyWriteConcern(_this.options, {\n          db: db\n        }, _this.options);\n      }\n\n      _this.options.readPreference = ReadPreference.primary;\n    }\n\n    _this.db = db;\n\n    if (command != null) {\n      _this.command = command;\n    }\n\n    if (collection != null) {\n      _this.collection = collection;\n    }\n\n    return _this;\n  }\n\n  _createClass(CommandOperation, [{\n    key: \"_buildCommand\",\n    value: function _buildCommand() {\n      if (this.command != null) {\n        return this.command;\n      }\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(callback) {\n      var db = this.db;\n      var options = Object.assign({}, this.options); // Did the user destroy the topology\n\n      if (db.serverConfig && db.serverConfig.isDestroyed()) {\n        return callback(new MongoError('topology was destroyed'));\n      }\n\n      var command;\n\n      try {\n        command = this._buildCommand();\n      } catch (e) {\n        return callback(e);\n      } // Get the db name we are executing against\n\n\n      var dbName = options.dbName || options.authdb || db.databaseName; // Convert the readPreference if its not a write\n\n      if (this.hasAspect(Aspect.WRITE_OPERATION)) {\n        if (options.writeConcern && (!options.session || !options.session.inTransaction())) {\n          command.writeConcern = options.writeConcern;\n        }\n      } // Debug information\n\n\n      if (db.s.logger.isDebug()) {\n        db.s.logger.debug(\"executing command \".concat(JSON.stringify(command), \" against \").concat(dbName, \".$cmd with options [\").concat(JSON.stringify(debugOptions(debugFields, options)), \"]\"));\n      }\n\n      var namespace = this.namespace != null ? this.namespace : new MongoDBNamespace(dbName, '$cmd'); // Execute command\n\n      db.s.topology.command(namespace, command, options, function (err, result) {\n        if (err) return handleCallback(callback, err);\n        if (options.full) return handleCallback(callback, null, result);\n        handleCallback(callback, null, result.result);\n      });\n    }\n  }]);\n\n  return CommandOperation;\n}(OperationBase);\n\nmodule.exports = CommandOperation;","map":null,"metadata":{},"sourceType":"script"}
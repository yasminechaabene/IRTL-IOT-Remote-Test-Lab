{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar crypto = require('crypto');\n\nvar requireOptional = require('require_optional');\n/**\n * Generate a UUIDv4\n */\n\n\nvar uuidV4 = function uuidV4() {\n  var result = crypto.randomBytes(16);\n  result[6] = result[6] & 0x0f | 0x40;\n  result[8] = result[8] & 0x3f | 0x80;\n  return result;\n};\n/**\n * Returns the duration calculated from two high resolution timers in milliseconds\n *\n * @param {Object} started A high resolution timestamp created from `process.hrtime()`\n * @returns {Number} The duration in milliseconds\n */\n\n\nvar calculateDurationInMs = function calculateDurationInMs(started) {\n  var hrtime = process.hrtime(started);\n  return (hrtime[0] * 1e9 + hrtime[1]) / 1e6;\n};\n/**\n * Relays events for a given listener and emitter\n *\n * @param {EventEmitter} listener the EventEmitter to listen to the events from\n * @param {EventEmitter} emitter the EventEmitter to relay the events to\n */\n\n\nfunction relayEvents(listener, emitter, events) {\n  events.forEach(function (eventName) {\n    return listener.on(eventName, function (event) {\n      return emitter.emit(eventName, event);\n    });\n  });\n}\n\nfunction retrieveKerberos() {\n  var kerberos;\n\n  try {\n    kerberos = requireOptional('kerberos');\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      throw new Error('The `kerberos` module was not found. Please install it and try again.');\n    }\n\n    throw err;\n  }\n\n  return kerberos;\n} // Throw an error if an attempt to use EJSON is made when it is not installed\n\n\nvar noEJSONError = function noEJSONError() {\n  throw new Error('The `mongodb-extjson` module was not found. Please install it and try again.');\n}; // Facilitate loading EJSON optionally\n\n\nfunction retrieveEJSON() {\n  var EJSON = null;\n\n  try {\n    EJSON = requireOptional('mongodb-extjson');\n  } catch (error) {} // eslint-disable-line\n\n\n  if (!EJSON) {\n    EJSON = {\n      parse: noEJSONError,\n      deserialize: noEJSONError,\n      serialize: noEJSONError,\n      stringify: noEJSONError,\n      setBSONModule: noEJSONError,\n      BSON: noEJSONError\n    };\n  }\n\n  return EJSON;\n}\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology\n * instances\n *\n * @private\n * @param {(Topology|Server)} topologyOrServer\n */\n\n\nfunction maxWireVersion(topologyOrServer) {\n  if (topologyOrServer.ismaster) {\n    return topologyOrServer.ismaster.maxWireVersion;\n  }\n\n  if (typeof topologyOrServer.lastIsMaster === 'function') {\n    var lastIsMaster = topologyOrServer.lastIsMaster();\n\n    if (lastIsMaster) {\n      return lastIsMaster.maxWireVersion;\n    }\n  }\n\n  if (topologyOrServer.description) {\n    return topologyOrServer.description.maxWireVersion;\n  }\n\n  return null;\n}\n/*\n * Checks that collation is supported by server.\n *\n * @param {Server} [server] to check against\n * @param {object} [cmd] object where collation may be specified\n * @param {function} [callback] callback function\n * @return true if server does not support collation\n */\n\n\nfunction collationNotSupported(server, cmd) {\n  return cmd && cmd.collation && maxWireVersion(server) < 5;\n}\n/**\n * Checks if a given value is a Promise\n *\n * @param {*} maybePromise\n * @return true if the provided value is a Promise\n */\n\n\nfunction isPromiseLike(maybePromise) {\n  return maybePromise && typeof maybePromise.then === 'function';\n}\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n *\n * @param {array} arr an array of items to asynchronusly iterate over\n * @param {function} eachFn A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param {function} callback The callback called after every item has been iterated\n */\n\n\nfunction eachAsync(arr, eachFn, callback) {\n  arr = arr || [];\n  var idx = 0;\n  var awaiting = 0;\n\n  for (idx = 0; idx < arr.length; ++idx) {\n    awaiting++;\n    eachFn(arr[idx], eachCallback);\n  }\n\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err) {\n    awaiting--;\n\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n    }\n  }\n}\n\nfunction isUnifiedTopology(topology) {\n  return topology.description != null;\n}\n\nfunction arrayStrictEqual(arr, arr2) {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n\n  return arr.length === arr2.length && arr.every(function (elt, idx) {\n    return elt === arr2[idx];\n  });\n}\n\nfunction tagsStrictEqual(tags, tags2) {\n  var tagsKeys = Object.keys(tags);\n  var tags2Keys = Object.keys(tags2);\n  return tagsKeys.length === tags2Keys.length && tagsKeys.every(function (key) {\n    return tags2[key] === tags[key];\n  });\n}\n\nfunction errorStrictEqual(lhs, rhs) {\n  if (lhs === rhs) {\n    return true;\n  }\n\n  if (lhs == null && rhs != null || lhs != null && rhs == null) {\n    return false;\n  }\n\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction makeStateMachine(stateTable) {\n  return function stateTransition(target, newState) {\n    var legalStates = stateTable[target.s.state];\n\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new TypeError(\"illegal state transition from [\".concat(target.s.state, \"] => [\").concat(newState, \"], allowed: [\").concat(legalStates, \"]\"));\n    }\n\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n\nfunction makeClientMetadata(options) {\n  options = options || {};\n  var metadata = {\n    driver: {\n      name: 'nodejs',\n      version: require('../../package.json').version\n    },\n    os: {\n      type: os.type(),\n      name: process.platform,\n      architecture: process.arch,\n      version: os.release()\n    },\n    platform: \"'Node.js \".concat(process.version, \", \").concat(os.endianness, \" (\").concat(options.useUnifiedTopology ? 'unified' : 'legacy', \")\")\n  }; // support optionally provided wrapping driver info\n\n  if (options.driverInfo) {\n    if (options.driverInfo.name) {\n      metadata.driver.name = \"\".concat(metadata.driver.name, \"|\").concat(options.driverInfo.name);\n    }\n\n    if (options.driverInfo.version) {\n      metadata.version = \"\".concat(metadata.driver.version, \"|\").concat(options.driverInfo.version);\n    }\n\n    if (options.driverInfo.platform) {\n      metadata.platform = \"\".concat(metadata.platform, \"|\").concat(options.driverInfo.platform);\n    }\n  }\n\n  if (options.appname) {\n    // MongoDB requires the appname not exceed a byte length of 128\n    var buffer = Buffer.from(options.appname);\n    metadata.application = {\n      name: buffer.length > 128 ? buffer.slice(0, 128).toString('utf8') : options.appname\n    };\n  }\n\n  return metadata;\n}\n\nvar noop = function noop() {};\n\nmodule.exports = {\n  uuidV4: uuidV4,\n  calculateDurationInMs: calculateDurationInMs,\n  relayEvents: relayEvents,\n  collationNotSupported: collationNotSupported,\n  retrieveEJSON: retrieveEJSON,\n  retrieveKerberos: retrieveKerberos,\n  maxWireVersion: maxWireVersion,\n  isPromiseLike: isPromiseLike,\n  eachAsync: eachAsync,\n  isUnifiedTopology: isUnifiedTopology,\n  arrayStrictEqual: arrayStrictEqual,\n  tagsStrictEqual: tagsStrictEqual,\n  errorStrictEqual: errorStrictEqual,\n  makeStateMachine: makeStateMachine,\n  makeClientMetadata: makeClientMetadata,\n  noop: noop\n};","map":null,"metadata":{},"sourceType":"script"}
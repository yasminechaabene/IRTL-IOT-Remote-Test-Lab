{"ast":null,"code":"'use strict';\n\nvar MongoError = require('../error').MongoError;\n\nvar collectionNamespace = require('./shared').collectionNamespace;\n\nvar command = require('./command');\n\nfunction writeCommand(server, type, opsField, ns, ops, options, callback) {\n  if (ops.length === 0) throw new MongoError(\"\".concat(type, \" must contain at least one document\"));\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  var ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n  var writeConcern = options.writeConcern;\n  var writeCommand = {};\n  writeCommand[type] = collectionNamespace(ns);\n  writeCommand[opsField] = ops;\n  writeCommand.ordered = ordered;\n\n  if (writeConcern && Object.keys(writeConcern).length > 0) {\n    writeCommand.writeConcern = writeConcern;\n  }\n\n  if (options.collation) {\n    for (var i = 0; i < writeCommand[opsField].length; i++) {\n      if (!writeCommand[opsField][i].collation) {\n        writeCommand[opsField][i].collation = options.collation;\n      }\n    }\n  }\n\n  if (options.bypassDocumentValidation === true) {\n    writeCommand.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n\n  var commandOptions = Object.assign({\n    checkKeys: type === 'insert',\n    numberToReturn: 1\n  }, options);\n  command(server, ns, writeCommand, commandOptions, callback);\n}\n\nmodule.exports = writeCommand;","map":null,"metadata":{},"sourceType":"script"}
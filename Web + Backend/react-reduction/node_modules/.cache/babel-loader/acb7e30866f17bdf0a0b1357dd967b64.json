{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Aspect = require('./operation').Aspect;\n\nvar defineAspects = require('./operation').defineAspects;\n\nvar OperationBase = require('./operation').OperationBase;\n\nvar executeCommand = require('./db_ops').executeCommand;\n\nvar MongoError = require('../core').MongoError;\n\nvar ReadPreference = require('../core').ReadPreference;\n\nvar CreateIndexesOperation = /*#__PURE__*/function (_OperationBase) {\n  _inherits(CreateIndexesOperation, _OperationBase);\n\n  function CreateIndexesOperation(collection, indexSpecs, options) {\n    var _this;\n\n    _classCallCheck(this, CreateIndexesOperation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreateIndexesOperation).call(this, options));\n    _this.collection = collection;\n    _this.indexSpecs = indexSpecs;\n    return _this;\n  }\n\n  _createClass(CreateIndexesOperation, [{\n    key: \"execute\",\n    value: function execute(callback) {\n      var coll = this.collection;\n      var indexSpecs = this.indexSpecs;\n      var options = this.options;\n      var capabilities = coll.s.topology.capabilities(); // Ensure we generate the correct name if the parameter is not set\n\n      for (var i = 0; i < indexSpecs.length; i++) {\n        if (indexSpecs[i].name == null) {\n          var keys = []; // Did the user pass in a collation, check if our write server supports it\n\n          if (indexSpecs[i].collation && capabilities && !capabilities.commandsTakeCollation) {\n            return callback(new MongoError('server/primary/mongos does not support collation'));\n          }\n\n          for (var name in indexSpecs[i].key) {\n            keys.push(\"\".concat(name, \"_\").concat(indexSpecs[i].key[name]));\n          } // Set the name\n\n\n          indexSpecs[i].name = keys.join('_');\n        }\n      }\n\n      options = Object.assign({}, options, {\n        readPreference: ReadPreference.PRIMARY\n      }); // Execute the index\n\n      executeCommand(coll.s.db, {\n        createIndexes: coll.collectionName,\n        indexes: indexSpecs\n      }, options, callback);\n    }\n  }]);\n\n  return CreateIndexesOperation;\n}(OperationBase);\n\ndefineAspects(CreateIndexesOperation, Aspect.WRITE_OPERATION);\nmodule.exports = CreateIndexesOperation;","map":null,"metadata":{},"sourceType":"script"}
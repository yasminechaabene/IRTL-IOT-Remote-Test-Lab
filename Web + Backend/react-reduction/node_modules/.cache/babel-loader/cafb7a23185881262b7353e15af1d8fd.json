{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"C:\\\\Users\\\\yosrj\\\\Desktop\\\\IOT_Lab\\\\react-reduction\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar AuthProvider = require('./auth_provider').AuthProvider;\n\nvar retrieveKerberos = require('../utils').retrieveKerberos;\n\nvar kerberos;\n/**\n * Creates a new GSSAPI authentication mechanism\n * @class\n * @extends AuthProvider\n */\n\nvar GSSAPI = /*#__PURE__*/function (_AuthProvider) {\n  _inherits(GSSAPI, _AuthProvider);\n\n  function GSSAPI() {\n    _classCallCheck(this, GSSAPI);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GSSAPI).apply(this, arguments));\n  }\n\n  _createClass(GSSAPI, [{\n    key: \"_authenticateSingleConnection\",\n\n    /**\n     * Implementation of authentication for a single connection\n     * @override\n     */\n    value: function _authenticateSingleConnection(sendAuthCommand, connection, credentials, callback) {\n      var source = credentials.source;\n      var username = credentials.username;\n      var password = credentials.password;\n      var mechanismProperties = credentials.mechanismProperties;\n      var gssapiServiceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n      GSSAPIInitialize(this, kerberos.processes.MongoAuthProcess, source, username, password, source, gssapiServiceName, sendAuthCommand, connection, mechanismProperties, callback);\n    }\n    /**\n     * Authenticate\n     * @override\n     * @method\n     */\n\n  }, {\n    key: \"auth\",\n    value: function auth(sendAuthCommand, connections, credentials, callback) {\n      if (kerberos == null) {\n        try {\n          kerberos = retrieveKerberos();\n        } catch (e) {\n          return callback(e, null);\n        }\n      }\n\n      _get(_getPrototypeOf(GSSAPI.prototype), \"auth\", this).call(this, sendAuthCommand, connections, credentials, callback);\n    }\n  }]);\n\n  return GSSAPI;\n}(AuthProvider); //\n// Initialize step\n\n\nvar GSSAPIInitialize = function GSSAPIInitialize(self, MongoAuthProcess, db, username, password, authdb, gssapiServiceName, sendAuthCommand, connection, options, callback) {\n  // Create authenticator\n  var mongo_auth_process = new MongoAuthProcess(connection.host, connection.port, gssapiServiceName, options); // Perform initialization\n\n  mongo_auth_process.init(username, password, function (err) {\n    if (err) return callback(err, false); // Perform the first step\n\n    mongo_auth_process.transition('', function (err, payload) {\n      if (err) return callback(err, false); // Call the next db step\n\n      MongoDBGSSAPIFirstStep(self, mongo_auth_process, payload, db, username, password, authdb, sendAuthCommand, connection, callback);\n    });\n  });\n}; //\n// Perform first step against mongodb\n\n\nvar MongoDBGSSAPIFirstStep = function MongoDBGSSAPIFirstStep(self, mongo_auth_process, payload, db, username, password, authdb, sendAuthCommand, connection, callback) {\n  // Build the sasl start command\n  var command = {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload: payload,\n    autoAuthorize: 1\n  }; // Write the commmand on the connection\n\n  sendAuthCommand(connection, '$external.$cmd', command, function (err, doc) {\n    if (err) return callback(err, false); // Execute mongodb transition\n\n    mongo_auth_process.transition(doc.payload, function (err, payload) {\n      if (err) return callback(err, false); // MongoDB API Second Step\n\n      MongoDBGSSAPISecondStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback);\n    });\n  });\n}; //\n// Perform first step against mongodb\n\n\nvar MongoDBGSSAPISecondStep = function MongoDBGSSAPISecondStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback) {\n  // Build Authentication command to send to MongoDB\n  var command = {\n    saslContinue: 1,\n    conversationId: doc.conversationId,\n    payload: payload\n  }; // Execute the command\n  // Write the commmand on the connection\n\n  sendAuthCommand(connection, '$external.$cmd', command, function (err, doc) {\n    if (err) return callback(err, false); // Call next transition for kerberos\n\n    mongo_auth_process.transition(doc.payload, function (err, payload) {\n      if (err) return callback(err, false); // Call the last and third step\n\n      MongoDBGSSAPIThirdStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback);\n    });\n  });\n};\n\nvar MongoDBGSSAPIThirdStep = function MongoDBGSSAPIThirdStep(self, mongo_auth_process, payload, doc, db, username, password, authdb, sendAuthCommand, connection, callback) {\n  // Build final command\n  var command = {\n    saslContinue: 1,\n    conversationId: doc.conversationId,\n    payload: payload\n  }; // Execute the command\n\n  sendAuthCommand(connection, '$external.$cmd', command, function (err, r) {\n    if (err) return callback(err, false);\n    mongo_auth_process.transition(null, function (err) {\n      if (err) return callback(err, null);\n      callback(null, r);\n    });\n  });\n};\n/**\n * This is a result from a authentication strategy\n *\n * @callback authResultCallback\n * @param {error} error An error object. Set to null if no error present\n * @param {boolean} result The result of the authentication process\n */\n\n\nmodule.exports = GSSAPI;","map":null,"metadata":{},"sourceType":"script"}
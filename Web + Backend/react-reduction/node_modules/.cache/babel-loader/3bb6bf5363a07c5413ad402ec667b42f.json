{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.between = between;\nexports.callIfDefined = callIfDefined;\nexports.getAmPmLabels = getAmPmLabels;\n\nvar _dateFormatter = require(\"./dateFormatter\");\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Returns a value no smaller than min and no larger than max.\n *\n * @param {*} value Value to return.\n * @param {*} min Minimum return value.\n * @param {*} max Maximum return value.\n */\n\n\nfunction between(value, min, max) {\n  if (min && min > value) {\n    return min;\n  }\n\n  if (max && max < value) {\n    return max;\n  }\n\n  return value;\n}\n/**\n * Calls a function, if it's defined, with specified arguments\n * @param {Function} fn\n * @param {Object} args\n */\n\n\nfunction callIfDefined(fn) {\n  if (fn && typeof fn === 'function') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    fn.apply(void 0, args);\n  }\n}\n\nvar nines = ['9', 'Ù©'];\nvar ninesRegExp = new RegExp(\"[\".concat(nines.join(''), \"]\"));\nvar amPmFormatter = (0, _dateFormatter.getFormatter)({\n  hour: 'numeric'\n});\n\nfunction getAmPmLabels(locale) {\n  var amString = amPmFormatter(locale, new Date(2017, 0, 1, 9));\n  var pmString = amPmFormatter(locale, new Date(2017, 0, 1, 21));\n\n  var _amString$split = amString.split(ninesRegExp),\n      _amString$split2 = _slicedToArray(_amString$split, 2),\n      am1 = _amString$split2[0],\n      am2 = _amString$split2[1];\n\n  var _pmString$split = pmString.split(ninesRegExp),\n      _pmString$split2 = _slicedToArray(_pmString$split, 2),\n      pm1 = _pmString$split2[0],\n      pm2 = _pmString$split2[1];\n\n  if (pm2 !== undefined) {\n    // If pm2 is undefined, nine was not found in pmString - this locale is not using 12-hour time\n    if (am1 !== pm1) {\n      return [am1, pm1].map(function (el) {\n        return el.trim();\n      });\n    }\n\n    if (am2 !== pm2) {\n      return [am2, pm2].map(function (el) {\n        return el.trim();\n      });\n    }\n  } // Fallback\n\n\n  return ['AM', 'PM'];\n}","map":null,"metadata":{},"sourceType":"script"}